import{_ as s,o as a,c as t,d as p,a as n,b as e,e as o}from"./app-450c3553.js";const c={},l=n("h1",{id:"spi扩展及其源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spi扩展及其源码","aria-hidden":"true"},"#"),e(" SPI扩展及其源码")],-1),i=n("p",null,"dubbo的扩展点实现与JAVA中实现的扩展点类似，但是功能比JAVA提供的会强大一些。 本次文章简单记录Dubbo SPI扩展点的使用以及核心原理，通过对源码的解读学习dubbo spi扩展点的核心实现以及内部的使用。",-1),u=o(`<p>SPI 扩展点的实现，都是基于接口来实现的，所以扩展点都是通过实现某个接口来进行扩展的。</p><h2 id="核心对象-extensionloader" tabindex="-1"><a class="header-anchor" href="#核心对象-extensionloader" aria-hidden="true">#</a> 核心对象（ExtensionLoader）</h2><p>ExtensionLoader表示某个接口的扩展点加载器，可以用来加载某个扩展点实例。</p><h3 id="核心属性" tabindex="-1"><a class="header-anchor" href="#核心属性" aria-hidden="true">#</a> 核心属性</h3><ul><li>extensionInstances：用来缓存某个接口类型所对应的ExtensionLoader实例</li><li>type：表示当前ExtensionLoader实例是那个接口的扩展点加载器</li><li>objectFactory：扩展点工厂，可以通过工厂获取某个扩展点的具体对象实例</li></ul><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><ul><li>新建maven工程，并引入dubbo相关依赖</li><li>在resource包下创建子包：MEAT-INF.dubbo</li><li>在dubbo包下创建扩展点文件，文件名为扩展点的全类名（包含包名和接口名）</li><li>在文件内填写扩展点实现类的全类名以及映射关系</li></ul><figure><img src="https://qiniu.yanggl.cn/image/2305140206_1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当以上步骤都完成以后，在启动类main方法中通过dubbo的扩展点加载器来加载扩展点</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 获取加载扩展点加载器</span>
    <span class="token class-name">ExtensionLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> extensionLoader <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取扩展点实现</span>
    <span class="token class-name">Car</span> car <span class="token operator">=</span> extensionLoader<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码" aria-hidden="true">#</a> 源码</h2><h3 id="扩展点加载器" tabindex="-1"><a class="header-anchor" href="#扩展点加载器" aria-hidden="true">#</a> 扩展点加载器</h3><p>getExtensionLoader(Class class)；</p><p>实现的是通过某个扩展点，获取该扩展点的扩展点加载器</p><ul><li>先查询缓存中有没有传入的扩展点的扩展点加载器，有直接返回</li><li>校验该扩展点是否有scope应用范围缓存，没有就从@SPI注解中获取，默认是范围是APPLICATION</li><li>判断有没有父扩展点控制器，有的话通过父控制器创建</li></ul><h3 id="获取扩展点" tabindex="-1"><a class="header-anchor" href="#获取扩展点" aria-hidden="true">#</a> 获取扩展点</h3><p>T getExtension(String name)；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> wrap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断扩展点控制器是否已销毁</span>
        <span class="token function">checkDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 参数校验</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Extension name == null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果传入的字符串是true，则返回默认的扩展点实例</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getDefaultExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token class-name">String</span> cacheKey <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wrap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cacheKey <span class="token operator">+=</span> <span class="token string">&quot;_origin&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取holder,holder中封装具体的扩展点实例</span>
        <span class="token keyword">final</span> <span class="token class-name">Holder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> holder <span class="token operator">=</span> <span class="token function">getOrCreateHolder</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 双重检查、加锁创建holder</span>
        <span class="token class-name">Object</span> instance <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>holder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                instance <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                     <span class="token comment">// 创建扩展点</span>
                    instance <span class="token operator">=</span> <span class="token function">createExtension</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> wrap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 将扩展点赋值到holder中</span>
                    holder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>传入的name如果是<strong>true</strong>,则获取默认的扩展点实现，如果没有配则返回null</li><li>通过name,获取一个holder，holder中存扩展点实例。先通过缓存获取，没有则创建一个，然后添加到缓存中</li><li>获取扩展点实例，如果为null则通过holder进行加锁，并进行双重检查，然后创建扩展点实例</li></ul><figure><img src="https://qiniu.yanggl.cn/image/2305140206_2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过holder对象可以看到，里面只有一个value参数，存的就是扩展点实例。 那为什么要将实例封装在holder中再进行缓存，而不是直接缓存具体实例呢？</p><blockquote><p>从上面获取扩展点源码中就可以看出，首先是从缓存中获取holder，然后通过holder加锁去创建扩展点实例，这一步就是为了细化加锁的粒度，不同的扩展点实例只会有一个锁。<br> 如果我们不适用holder包装一下实例，那缓存中获取的就是null，没办法去处理并发下创建扩展点实例的问题了。</p></blockquote><h3 id="创建扩展点-createextension" tabindex="-1"><a class="header-anchor" href="#创建扩展点-createextension" aria-hidden="true">#</a> 创建扩展点（createExtension）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">createExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> wrap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 通过名称，获取扩展接口class</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token function">getExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> unacceptableExceptions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token function">findException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> extensionInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 创建实例</span>
                extensionInstances<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token function">createExtensionInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> extensionInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 调用实例化前处理器</span>
                instance <span class="token operator">=</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 实例化</span>
                <span class="token function">injectExtension</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//调用实例化后处理器</span>
                instance <span class="token operator">=</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>wrap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wrapperClassesList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedWrapperClasses <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    wrapperClassesList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cachedWrapperClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    wrapperClassesList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">WrapperComparator</span><span class="token punctuation">.</span><span class="token constant">COMPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>wrapperClassesList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>wrapperClassesList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> wrapperClass <span class="token operator">:</span> wrapperClassesList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Wrapper</span> wrapper <span class="token operator">=</span> wrapperClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">boolean</span> match <span class="token operator">=</span>
                            <span class="token punctuation">(</span>wrapper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>
                                <span class="token punctuation">(</span><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">mismatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
                            <span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 获取包装类有type类的构造方法，构建包装类</span>
                            instance <span class="token operator">=</span> <span class="token function">injectExtension</span><span class="token punctuation">(</span>
                                <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> wrapperClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            instance <span class="token operator">=</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Warning: After an instance of Lifecycle is wrapped by cachedWrapperClasses, it may not still be Lifecycle instance, this application may not invoke the lifecycle.initialize hook.</span>
            <span class="token function">initExtension</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Extension instance (name: &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, class: &quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">&quot;) couldn&#39;t be instantiated: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过传入的name获取扩展点</li><li>通过扩展点尝试从缓存中获取具体的实例，没有则创建</li><li>调用扩展点实例化前的处理器</li><li>实例化</li><li>调用扩展点实例化后处理器</li><li>如果存在包装器，还要创建包装器，并将实例放到包装器中（AOP）</li></ul><h4 id="加载文件" tabindex="-1"><a class="header-anchor" href="#加载文件" aria-hidden="true">#</a> 加载文件</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token function">checkDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 缓存扩展点的默认实例</span>
        <span class="token function">cacheDefaultExtensionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// red=cn.yanggl.RedCar -&gt; &lt;red,RedCar.class&gt;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> extensionClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 从多个目录下加载文件并解析</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">LoadingStrategy</span> strategy <span class="token operator">:</span> strategies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> strategy<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// compatible with old ExtensionFactory</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token class-name">ExtensionInjector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> strategy<span class="token punctuation">,</span> <span class="token class-name">ExtensionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> extensionClasses<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>从缓存中获取所有扩展点组成的mapper，如果为空的就加锁然后从文件中加载</li><li>解析@SPI上标注的默认扩展点，有则进行缓存（@SPI注解上的默认扩展点只能有一个，写了多个就会报错）</li><li>编列多个目录下进行加载文件并解析，存到extensionClasses中</li></ul><h4 id="解析文件" tabindex="-1"><a class="header-anchor" href="#解析文件" aria-hidden="true">#</a> 解析文件</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadResource</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> extensionClasses<span class="token punctuation">,</span>
                              <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">,</span>
                              <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL</span> resourceURL<span class="token punctuation">,</span>
                              <span class="token keyword">boolean</span> overridden<span class="token punctuation">,</span>
                              <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> includedPackages<span class="token punctuation">,</span>
                              <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> excludedPackages<span class="token punctuation">,</span>
                              <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onlyExtensionClassLoaderPackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取新文件内容</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newContentList <span class="token operator">=</span> <span class="token function">getResourceContent</span><span class="token punctuation">(</span>resourceURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> clazz<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> newContentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> i <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        name <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        clazz <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        clazz <span class="token operator">=</span> line<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isExcluded</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> excludedPackages<span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> <span class="token function">isIncluded</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> includedPackages<span class="token punctuation">)</span>
                        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isExcludedByClassLoader</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> onlyExtensionClassLoaderPackages<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                        <span class="token comment">// 加载类，并添加到extensionClasses中</span>
                        <span class="token function">loadClass</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span>
                            extensionClasses<span class="token punctuation">,</span>
                            resourceURL<span class="token punctuation">,</span>
                            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">,</span>
                            name<span class="token punctuation">,</span>
                            overridden<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">IllegalStateException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;Failed to load extension class (interface: &quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">&quot;, class line: &quot;</span> <span class="token operator">+</span> line <span class="token operator">+</span> <span class="token string">&quot;) in &quot;</span> <span class="token operator">+</span> resourceURL <span class="token operator">+</span> <span class="token string">&quot;, cause: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    exceptions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token constant">COMMON_ERROR_LOAD_EXTENSION</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;Exception occurred when loading extension class (interface: &quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">&quot;, class file: &quot;</span> <span class="token operator">+</span> resourceURL <span class="token operator">+</span> <span class="token string">&quot;) in &quot;</span> <span class="token operator">+</span> resourceURL<span class="token punctuation">,</span>
                t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先通过文件路径加载内容</li><li>便利所有行，并解析行数据，将等号左边作为key，右边的全类路径创建实例作为value存到extensionClasses中 <ul><li>判断类是不是有@Adaptive注解</li><li>判断类是不是wrapper包装类（存在一个参数的构造器并且参数==type）</li><li>都不是则正常创建（扩展点允许多个别名）<br><img src="https://qiniu.yanggl.cn/image/2305140206_3.png" alt="" loading="lazy"></li></ul></li></ul><h4 id="扩展点依赖注入-ioc" tabindex="-1"><a class="header-anchor" href="#扩展点依赖注入-ioc" aria-hidden="true">#</a> 扩展点依赖注入（IOC）</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">injectExtension</span><span class="token punctuation">(</span><span class="token class-name">T</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>injector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 不是set方法，跳过</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token doc-comment comment">/**
                 * Check <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DisableInject</span></span><span class="token punctuation">}</span> to see if we need auto-injection for this property
                 */</span>
                <span class="token comment">// set方法上有@DisableInject，跳过</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">DisableInject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// When spiXXX implements ScopeModelAware, ExtensionAccessorAware,</span>
                <span class="token comment">// the setXXX of ScopeModelAware and ExtensionAccessorAware does not need to be injected</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ScopeModelAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">ScopeModelAware</span> <span class="token operator">||</span> instance <span class="token keyword">instanceof</span> <span class="token class-name">ExtensionAccessorAware</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoredInjectMethodsDesc<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">ReflectUtils</span><span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 获取set方法的第一个参数类型</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> pt <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// 判断是不是基本类型（String、Integer...）</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ReflectUtils</span><span class="token punctuation">.</span><span class="token function">isPrimitives</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 截取set方法名（setCar -&gt; car）</span>
                    <span class="token class-name">String</span> property <span class="token operator">=</span> <span class="token function">getSetterProperty</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 获取指定类型和名称的实例</span>
                    <span class="token class-name">Object</span> object <span class="token operator">=</span> injector<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token constant">COMMON_ERROR_LOAD_EXTENSION</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;Failed to inject via method &quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; of interface &quot;</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token constant">COMMON_ERROR_LOAD_EXTENSION</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>便利所有实例的方法，跳过不是set方法、方法上有@DisableInject、实现ScopeModelAware接口的方法</li><li>获取set方法的第一个参数类型，如果是基本数据类型则跳过</li><li>截取set方法名（setCar -&gt; car）</li><li>通过参数类型和名称创建实例 <ul><li>通过Spring容器获取</li><li>dubbo自己去生成一个代理类（方法上要加@Adaptive,否则调用方法的时候会报错）</li></ul></li></ul><h3 id="包装器-aop" tabindex="-1"><a class="header-anchor" href="#包装器-aop" aria-hidden="true">#</a> 包装器（AOP）</h3><ul><li>获取文件解析时存的所有包装器，降序排序，然后再颠倒成升序</li><li>便利所有的包装器</li><li>判断，需要生成实例的条件如下 <ul><li>类上没有@Wrapper</li><li>有@Wrapper注解 <ul><li>matches为空或者matches包含扩展点名称</li><li>并且mismatches不包含扩展点名称</li></ul></li></ul></li><li>找包装类上有以扩展类类型为参数的构造方法，通过该构造方法创建包装类</li><li>传入包装类和扩展类类名，调用初始化后后置处理器</li></ul>`,36);function k(r,d){return a(),t("div",null,[l,i,p(" more "),u])}const m=s(c,[["render",k],["__file","2305140206.html.vue"]]);export{m as default};
