import{_ as n,o as s,c as e,d as t,a,b as c,e as p}from"./app-f39fbfe2.js";const o={},l=a("h1",{id:"threadlocal",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#threadlocal","aria-hidden":"true"},"#"),c(" ThreadLocal")],-1),i=a("p",null,"ThreadLocal是Java中的一个线程局部变量，它允许每个线程独立地存储和获取数据，保证线程之间的数据互相独立，避免并发访问带来的竞争条件。",-1),r=a("p",null,"ThreadLocal不是用来解决共享数据的问题，而是为了实现线程隔离的目的。它在某些场景下非常有用，如Web应用中的用户身份信息、数据库连接、事务管理等。",-1),d=a("p",null,"使用ThreadLocal需要注意内存泄漏的问题，因为ThreadLocal会持有线程的引用，如果线程不正确地被管理，可能会导致内存泄漏。在使用完ThreadLocal后，应该及时调用remove()方法清除数据，避免不必要的资源占用。",-1),u=p(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在某个方法中设置用户身份信息</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token comment">// 获取用户身份信息</span>
<span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在其他方法中获取用户身份信息</span>
<span class="token class-name">User</span> currentUser <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在上面的示例中，通过UserContext类和userThreadLocal实例，我们可以在不同的方法中共享用户身份信息，无需显式传递。可以通过UserContext.setUser(user)方法设置用户信息，然后在其他方法中使用UserContext.getUser()获取该用户信息。最后，可以通过UserContext.clearUser()方法清除当前线程的用户信息。</p></blockquote><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><ol><li>提供线程封闭（Thread Confinement）机制：ThreadLocal允许每个线程拥有自己的数据副本，避免了多线程之间的数据竞争问题。每个线程都可以独立地修改和访问自己的数据副本，而不会影响其他线程。</li><li>实现线程安全：通过将数据保存在ThreadLocal中，可以在多线程环境下实现线程安全。每个线程访问自己的ThreadLocal实例，不会受到其他线程的干扰，避免了使用锁机制的开销和复杂性。</li><li>提供线程间上下文传递：ThreadLocal可以用于在线程之间传递上下文信息，而不需要显式传递参数。在某些场景下，需要在多个方法或组件之间共享数据，但又不希望公开全局变量或传递参数，这时可以使用ThreadLocal来存储和获取数据。</li><li>解决线程安全问题：在某些情况下，一些对象可能不是线程安全的，无法在多线程环境下直接使用。通过将非线程安全的对象存储在ThreadLocal中，每个线程都拥有自己的副本，从而避免了并发访问的问题。</li></ol><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ol><li>Web应用中的用户身份信息：可以在请求处理链路的各个组件中共享用户身份信息，无需在每个方法中显式传递。</li><li>数据库连接、事务管理：ThreadLocal可以用于存储数据库连接、事务对象等，使每个线程都拥有独立的连接或事务，从而避免并发访问的问题。</li><li>线程池中的任务隔离：使用ThreadLocal可以为每个任务提供独立的上下文环境，避免数据混乱。</li></ol><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>ThreadLocal类接口很简单，其提供了一下方法：</p><ol><li>get(): 用于获取当前线程的ThreadLocal实例中存储的值。如果该线程尚未设置过值，则会使用初始值提供者（如果已设置）或返回null。</li><li>set(T value): 将指定的值设置到当前线程的ThreadLocal实例中。</li><li>remove(): 从当前线程的ThreadLocal实例中移除值。这样做可以避免潜在的内存泄漏，因为ThreadLocal会持有线程的引用。</li><li>initialValue(): 该方法在首次调用get()方法时被调用，返回ThreadLocal的初始值。默认情况下返回null，可以通过继承ThreadLocal并重写该方法来自定义初始值。</li><li>setInitialValue(ThreadLocal&lt;?&gt; local, Object value): 设置指定ThreadLocal实例的初始值。内部调用了initialValue()方法来获取初始值，并将其设置到指定的ThreadLocal实例中。</li><li>createMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue): 在首次调用set()方法时被调用，用于创建ThreadLocal实例的内部映射。</li></ol><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>ThreadLocal的底层实现主要依赖于Thread类中的一个成员变量ThreadLocalMap。</p><p>每个Thread对象中都有一个ThreadLocalMap对象，用于存储线程的ThreadLocal实例以及对应的值。ThreadLocalMap是一个自定义的哈希表结构，用于实现线程局部变量的存储和访问。</p><p>在ThreadLocal类中，使用ThreadLocalMap来管理每个线程的ThreadLocal实例及其对应的值。每个ThreadLocal实例作为ThreadLocalMap的键，而实际存储的值则作为ThreadLocalMap的值。</p><p>当调用ThreadLocal的set()方法时，实际上是通过Thread对象获取当前线程的ThreadLocalMap，并将ThreadLocal实例作为键，要设置的值作为值，存储到ThreadLocalMap中。<br> 同样，当调用ThreadLocal的get()方法时，也是通过Thread对象获取当前线程的ThreadLocalMap，并根据ThreadLocal实例获取对应的值。</p><p>为了保证高效的查找和存储，ThreadLocalMap使用线性探测法来解决哈希冲突。在哈希冲突的情况下，使用<strong>开放地址法</strong>寻找下一个可用的槽位。</p><p>需要注意的是，由于ThreadLocalMap是作为Thread的成员变量存在的，它是与每个线程绑定的。因此，每个线程都拥有自己的ThreadLocalMap和其中的数据，相互之间不会产生干扰。</p><p>另外，由于ThreadLocal在使用完毕后需要进行及时的清理，避免内存泄漏。Java中的ThreadLocal实现中并没有提供自动清理的机制，因此需要手动调用remove()<br> 方法或使用try-finally块来确保在使用完ThreadLocal后进行清理操作。</p><p>总之，ThreadLocal通过Thread对象中的ThreadLocalMap来实现线程局部变量的存储和访问，保证了每个线程拥有自己独立的数据副本，避免了并发访问的竞争条件。</p><h3 id="开放地址法" tabindex="-1"><a class="header-anchor" href="#开放地址法" aria-hidden="true">#</a> 开放地址法</h3><p>开放地址法（Open Addressing）是一种用于解决哈希冲突的方法，常用于哈希表的实现。当多个键映射到相同的哈希桶位置时，开放地址法使用一定的规则来寻找下一个可用的桶位，以存储冲突的键。</p><p>在开放地址法中，哈希表通常是一个固定大小的数组，称为哈希桶（Hash Bucket）。每个桶可以存储一个键值对或者被标记为空。当发生哈希冲突时，即多个键映射到同一个桶位置时，开放地址法会根据一定的规则去寻找下一个可用的桶位置，直到找到一个空桶或者遍历整个哈希表。</p><p>常见的开放地址法策略有以下几种：</p><ol><li>线性探测（Linear Probing）：当发生哈希冲突时，线性探测会逐个查找下一个桶，直到找到一个空桶或者遍历整个哈希表。具体地，下一个桶的位置计算公式为index = (index + 1) % capacity，其中index是当前桶的位置，capacity是哈希表的容量。</li><li>二次探测（Quadratic Probing）：二次探测通过使用二次方程来计算下一个桶的位置。具体地，下一个桶的位置计算公式为index = (index + i * i) % capacity，其中index是当前桶的位置，i是探测次数（从1开始），capacity是哈希表的容量。</li><li>双重散列（Double Hashing）：双重散列使用两个不同的哈希函数来计算下一个桶的位置。具体地，下一个桶的位置计算公式为index = (index + i * hash2(key)) % capacity，其中index是当前桶的位置，i是探测次数（从1开始），hash2(key)是第二个哈希函数的计算结果，capacity是哈希表的容量。</li></ol><p>在使用开放地址法解决哈希冲突时，需要注意以下几点：</p><ol><li>负载因子控制：为了保持较低的哈希冲突率，需要合理选择哈希表的容量，以及根据实际情况调整负载因子。负载因子是哈希表中已存储元素数量与桶位总数的比值，当负载因子较高时，哈希冲突的可能性增加，需要进行扩容操作。</li><li>删除元素的处理：在使用开放地址法时，删除元素可能会导致后续查询操作无法正确定位到原有的元素。</li></ol><h2 id="内存泄露问题" tabindex="-1"><a class="header-anchor" href="#内存泄露问题" aria-hidden="true">#</a> 内存泄露问题</h2><p>使用ThreadLocal时，需要注意潜在的内存泄漏问题。以下是一些可能引起内存泄漏的情况以及如何避免它们：</p><ol><li>未及时调用remove()方法：在使用完ThreadLocal后，应该及时调用remove()方法清除当前线程的ThreadLocal实例中存储的数据。如果没有显式调用remove()方法，ThreadLocal实例可能会一直持有对线程的引用，导致线程无法被垃圾回收，从而造成内存泄漏。因此，在使用完ThreadLocal后，应该确保在适当的时机调用remove()方法，例如在线程执行结束或不再需要ThreadLocal存储的数据时。</li><li>长时间存储大量数据：如果在ThreadLocal中存储大量的数据，并且线程的生命周期很长，可能会导致内存占用过高。因为ThreadLocal的数据是与线程绑定的，线程的长时间存活会导致ThreadLocal中的数据一直存在内存中。在这种情况下，可以考虑合理控制数据的大小或使用完后及时清理数据，避免过多的内存占用。</li><li>线程池中未清理ThreadLocal数据：在使用线程池时，如果使用了ThreadLocal，需要特别注意清理ThreadLocal数据。因为线程池的线程会被重用，ThreadLocal中的数据可能会被下一个任务错误地共享。为了避免这种情况，可以在任务执行结束后显式调用remove()方法清理ThreadLocal数据，或使用线程池提供的钩子方法（如afterExecute()）来清理ThreadLocal数据。</li><li>应用服务器的线程池问题：在使用应用服务器（如Tomcat）时，如果将ThreadLocal放在静态变量中，并且使用了应用服务器的线程池，可能会引发内存泄漏。因为应用服务器的线程池线程是被重用的，ThreadLocal中的数据可能会在不同请求之间共享。为了避免这种情况，应尽量避免将ThreadLocal放在静态变量中，或者在使用完后及时清理ThreadLocal数据。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMemoryLeak</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadLocalMemoryLeak</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMemoryLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 等待一段时间，模拟业务处理过程</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 主线程结束后，由于没有调用remove()方法清理ThreadLocal数据，可能会导致内存泄漏</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Main thread finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在子线程中设置大量数据到ThreadLocal中</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 10MB</span>
            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 模拟子线程的业务逻辑</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 不调用remove()方法，可能会导致内存泄漏</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在上述示例中，我们创建了一个ThreadLocal实例，并在子线程中将大量的数据存储到ThreadLocal中。然而，在子线程结束后，我们没有调用remove()方法来清理ThreadLocal中的数据。 如果运行该示例，主线程结束后，由于没有清理ThreadLocal中的数据，可能会导致内存泄漏。每个线程的ThreadLocal实例会持有对线程的引用，导致线程无法被垃圾回收。 为了避免内存泄漏，应该在合适的时机调用remove()方法，清理ThreadLocal中的数据。在上述示例中，可以在子线程的末尾添加threadLocal.remove()来手动清理ThreadLocal数据。</p></blockquote><p>为了避免ThreadLocal可能引发的内存泄漏问题，可以采取以下措施：</p><ol><li>及时调用remove()方法：在使用完ThreadLocal后，应该在合适的时机调用remove()方法，清理ThreadLocal中的数据。可以使用try-finally块，确保在使用完后无论是否发生异常都能够调用remove()方法。</li><li>使用线程池时注意清理：如果在使用线程池时使用了ThreadLocal，需要特别注意清理ThreadLocal数据。在任务执行结束后，可以通过线程池提供的钩子方法（如afterExecute()）来清理ThreadLocal数据。</li><li>使用InheritableThreadLocal时小心传递：如果使用InheritableThreadLocal，它会将数据从父线程传递给子线程。在使用InheritableThreadLocal时，需要注意在子线程中是否需要清理或重置ThreadLocal数据，以防止不必要的数据泄漏。</li><li>避免将ThreadLocal放在静态变量中：在某些情况下，将ThreadLocal实例放在静态变量中可能导致意外的内存泄漏。尽量避免在静态变量中使用ThreadLocal，或者在使用完后及时清理数据。</li><li>使用弱引用的ThreadLocal实现：可以自定义ThreadLocal的子类，使用弱引用（WeakReference）来持有线程本地的值。这样，在没有其他强引用指向ThreadLocal实例时，ThreadLocal的键值对将被垃圾回收。</li></ol>`,33);function k(h,v){return s(),e("div",null,[l,i,r,d,t(" more "),u])}const T=n(o,[["render",k],["__file","2305252031.html.vue"]]);export{T as default};
