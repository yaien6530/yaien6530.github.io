import{_ as i,o as r,c as o,d as n,a as e,b as a,e as d}from"./app-aefb116a.js";const t={},h=e("h1",{id:"dubbo-基本介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#dubbo-基本介绍","aria-hidden":"true"},"#"),a(" Dubbo 基本介绍")],-1),b=e("p",null,[a("Apache Dubbo 是一款 RPC 服务开发框架，用于解决微服务架构下的服务治理与通信问题，官方提供了 Java、Golang 等多语言 SDK 实现。使用 Dubbo 开发的微服务原生具备相互之间的远程地址发现与通信能力， 利用"),e("br"),a(" Dubbo 提供的丰富服务治理特性，可以实现诸如服务发现、负载均衡、流量调度等服务治理诉求。Dubbo 被设计为高度可扩展，用户可以方便的实现流量拦截、选址的各种定制逻辑。")],-1),c=e("p",null,"在云原生时代，Dubbo 相继衍生出了 Dubbo3、Proxyless Mesh 等架构与解决方案，在易用性、超大规模微服务实践、云原生基础设施适配、安全性等几大方向上进行了全面升级。",-1),s=d('<blockquote><p>Dubbo一开始的定位就是RPC，专注于两个服务之间的调用。但随着微服务的盛行，除开服务调用之外，Dubbo也在逐步的涉猎服务治理、服务监控、服务网关等等，所以现在的Dubbo目标已经不止是RPC框架了，而是和Spring Cloud类似想成为了一个服务框架</p></blockquote><h2 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件" aria-hidden="true">#</a> 核心组件</h2><h3 id="服务提供者-provider" tabindex="-1"><a class="header-anchor" href="#服务提供者-provider" aria-hidden="true">#</a> 服务提供者（Provider）</h3><p>作为服务的提供者，将自己的服务注册到注册中心，接收消费者的调用请求并提供相应的服务实现。提供者通常是一个独立的应用程序，它将自己的服务暴露给消费者。</p><h3 id="服务消费者-consumer" tabindex="-1"><a class="header-anchor" href="#服务消费者-consumer" aria-hidden="true">#</a> 服务消费者（Consumer）</h3><p>从注册中心获取服务提供者的地址，并发起远程调用请求</p><h3 id="注册中心-register" tabindex="-1"><a class="header-anchor" href="#注册中心-register" aria-hidden="true">#</a> 注册中心（Register）</h3><p>用于服务的注册与发现，提供服务地址的管理</p><h3 id="监控中心-monitor" tabindex="-1"><a class="header-anchor" href="#监控中心-monitor" aria-hidden="true">#</a> 监控中心（Monitor）</h3><p>实时监控和统计分析服务的运行情况和性能指标，帮助用户更好地管理和优化分布式服务，提高系统的可靠性和可用性</p><h3 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h3><figure><img src="https://qiniu.yanggl.cn/image/202305140041223.png" alt="基本原理" tabindex="0" loading="lazy"><figcaption>基本原理</figcaption></figure><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h2><p>从抽象架构上分为两层：服务治理抽象控制面 和 Dubbo 数据面</p><figure><img src="https://qiniu.yanggl.cn/image/202305140202123.png" alt="架构" tabindex="0" loading="lazy"><figcaption>架构</figcaption></figure><h3 id="服务治理控制面" tabindex="-1"><a class="header-anchor" href="#服务治理控制面" aria-hidden="true">#</a> 服务治理控制面</h3><p>服务治理控制面不是特指如注册中心类的单个具体组件，而是对 Dubbo 治理体系的抽象表达。控制面包含协调服务发现的注册中心、流量管控策略、Dubbo Admin 控制台等，如果采用了 Service Mesh 架构则还包含 Istio<br> 等服务网格控制面。</p><h3 id="dubbo数据面" tabindex="-1"><a class="header-anchor" href="#dubbo数据面" aria-hidden="true">#</a> Dubbo数据面</h3><p>数据面代表集群部署的所有 Dubbo 进程，进程之间通过 RPC 协议实现数据交换，Dubbo 定义了微服务应用开发与调用规范并负责完成数据传输的编解码工作</p><ul><li>服务消费者 (Dubbo Consumer)，发起业务调用或 RPC 通信的 Dubbo 进程</li><li>服务提供者 (Dubbo Provider)，接收业务调用或 RPC 通信的 Dubbo 进程</li></ul><h2 id="通信协议" tabindex="-1"><a class="header-anchor" href="#通信协议" aria-hidden="true">#</a> 通信协议</h2><p>Dubbo 从设计上不绑定任何一款特定通信协议，HTTP/2、REST、gRPC、JsonRPC、Thrift、Hessian2 等几乎所有主流的通信协议，Dubbo 框架都可以提供支持。</p><blockquote><p>这样的 Protocol 设计模式给构建微服务带来了最大的灵活性，开发者可以根据需要如性能、通用型等选择不同的通信协议，不再需要任何的代理来实现协议转换，甚至你还可以通过 Dubbo 实现不同协议间的迁移。</p></blockquote><figure><img src="https://qiniu.yanggl.cn/image/202305140203321.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',24);function u(l,p){return r(),o("div",null,[h,b,c,n(" more "),s])}const f=i(t,[["render",u],["__file","2305140023.html.vue"]]);export{f as default};
