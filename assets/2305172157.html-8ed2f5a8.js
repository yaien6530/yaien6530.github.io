import{_ as t,r as o,o as p,c as i,d as c,a as n,b as s,f as l,w as u,e as a}from"./app-8f74759d.js";const r={},k=n("h1",{id:"dubbo-整合-spring",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dubbo-整合-spring","aria-hidden":"true"},"#"),s(" Dubbo 整合 Spring")],-1),d=n("p",null,"本文主要记录学习Dubbo 整合 Spring 的源码笔记",-1),b=a(`<h2 id="启动类" tabindex="-1"><a class="header-anchor" href="#启动类" aria-hidden="true">#</a> 启动类</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ProviderConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Configuration</span>
    <span class="token annotation punctuation">@EnableDubbo</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token string">&quot;org.apache.dubbo.demo.provider&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/spring/dubbo-provider.properties&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ProviderConfiguration</span> <span class="token punctuation">{</span>
       
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dubbo整合Spring的关键主要有三部分</p><ul><li>解析properties配置文件，将配置文件中相关配置封装成一个个的config对象，存到ServiceBean中</li><li>处理@Service注解，服务提供者注解，将dubbo服务注册到注册中心并导出</li><li>处理@Reference注解，服务消费者注解，从注册中心获取服务并生成bean</li></ul><h2 id="enabledubbo" tabindex="-1"><a class="header-anchor" href="#enabledubbo" aria-hidden="true">#</a> @EnableDubbo</h2><p>@EnableDubbo注解是Spring引入Dubbo服务的关键注解，其内部还引入了两个注解@EnableDubboConfig和@DubboComponentScan</p><ul><li>@EnableDubboConfig：用来将properties文件中的配置项转化为对应的Bean</li><li>@DubboComponentScan：用来扫描服务提供者和引用者(@Service)</li></ul><p>同时，内部还定义有一些属性</p><ul><li>scanBasePackages：扫描基础包，用来加载带@Service注解类的</li><li>scanBasePackages：用于指定要扫描带注释的@Service类的包。该类下所有包都会被扫描。</li></ul><h2 id="enabledubboconfig" tabindex="-1"><a class="header-anchor" href="#enabledubboconfig" aria-hidden="true">#</a> @EnableDubboConfig</h2><p>@EnableDubboConfig下引入了Spring的@Inporty注解，并制定了要引入的类：<strong>DubboConfigConfigurationRegistrar</strong><br> ，这个类就是dubbo整合spring时，对配置进行解析的核心处理类。同时，该注解下还有一个<strong>multiple</strong>属性，这个属性是用于标记当前实例是否支持多协议，默认为<br><strong>true</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigConfigurationRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">AnnotationAttributes</span><span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>
                importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">EnableDubboConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;multiple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Single Config Bindings</span>
        <span class="token function">registerBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">DubboConfigConfiguration<span class="token punctuation">.</span>Single</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 默认为true</span>
        <span class="token comment">// Since 2.6.6 https://github.com/apache/dubbo/issues/3193</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">registerBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">DubboConfigConfiguration<span class="token punctuation">.</span>Multiple</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码主要就是调用了两次registerBeans,这个类做了一件事，使用<strong>AnnotatedBeanDefinitionReader</strong><br> 来读取DubboConfigBindingsRegistrar和<br><strong>DubboConfigConfiguration.Multiple.class</strong>这两个类上的注解</p><ul><li>DubboConfigConfiguration.Single.class</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Single Dubbo <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractConfig</span></span> Config<span class="token punctuation">}</span> Bean Binding
     */</span>
    <span class="token annotation punctuation">@EnableDubboConfigBindings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.application&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.module&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ModuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.registry&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.protocol&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProtocolConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.monitor&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MonitorConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.provider&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProviderConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.consumer&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.config-center&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConfigCenterBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metadata-report&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetadataReportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metrics&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetricsConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Single</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>DubboConfigConfiguration.Multiple.class</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Multiple Dubbo <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">AbstractConfig</span></span> Config<span class="token punctuation">}</span> Bean Binding
     */</span>
    <span class="token annotation punctuation">@EnableDubboConfigBindings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.applications&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ApplicationConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.modules&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ModuleConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.registries&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">RegistryConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.protocols&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProtocolConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.monitors&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MonitorConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.providers&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ProviderConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.consumers&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.config-centers&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">ConfigCenterBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metadata-reports&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetadataReportConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token annotation punctuation">@EnableDubboConfigBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;dubbo.metricses&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">MetricsConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Multiple</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上两个类，核心注解是**@EnableDubboConfigBindings**，注解中会通过@Import引入<strong>DubboConfigBindingsRegistrar</strong>类来解析<br><strong>@EnableDubboConfigBinding</strong>然后结合读取到的dubbo配置文件内容，注册成Bean对象</p><h3 id="解析properties" tabindex="-1"><a class="header-anchor" href="#解析properties" aria-hidden="true">#</a> 解析properties</h3><h4 id="实现流程" tabindex="-1"><a class="header-anchor" href="#实现流程" aria-hidden="true">#</a> 实现流程</h4><ul><li>获取@EnableDubboConfigBinding列表，使用一个AnnotationAttributes对象集合接收，然后进行遍历</li><li>获取AnnotationAttributes的prefix和type属性的值</li><li>通过spring提供的environment，获取properties文件中以上一步prefix中的值为前缀的Map数据</li><li>判断是否开了multiple多协议支持，然后调用对应的方法生成BeanName的Set集合 <ul><li>开启多协议，调用resolveMultipleBeanNamesS <ul><li>遍历map的key，截取kay生成beanName，添加到集合中返回:（dubbo.protocols.p1.name=dubbo,则beanName=p1）</li></ul></li><li>没开启，调用resolveSingleBeanName <ul><li>配置了dubbo.application.id=appl，那么appl就是beanName</li><li>没有则有spring自动生成一个beanName并返回</li></ul></li></ul></li><li>遍历所有的beanName,为每一个beanName注册一个空的BeanDefinition以及DubboConfigBindingBeanPostProcessor的Bean工厂的后置处理器（有问题）</li><li>注册一个NamePropertyDefaultValueDubboConfigBeanCustomizer的bean，用来把某个XxConfig所对应的beanName设置到name属性中去</li></ul><h4 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h4><figure><img src="https://qiniu.yanggl.cn/image/202305172355111.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="dubbocomponentscan" tabindex="-1"><a class="header-anchor" href="#dubbocomponentscan" aria-hidden="true">#</a> @DubboComponentScan</h2><p><strong>@DubboComponentScan</strong>通过Spring的 <strong>@Import</strong> 注入了 <strong>DubboComponentScanRegistrar</strong><br> 的Bean，当spring启动时会调用registerBeanDefinitions方法，方法内主要是向Spring容器中注册两个Bean:</p><ul><li>ServiceAnnotationBeanPostProcessor</li><li>ReferenceAnnotationBeanPostProcessor</li></ul><h3 id="serviceannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#serviceannotationbeanpostprocessor" aria-hidden="true">#</a> ServiceAnnotationBeanPostProcessor</h3><p>ServiceAnnotationBeanPostProcessor是一个BeanDefinitionRegistryPostProcessor，是用来注册BeanDefinition的。</p><p>它的主要作用是扫描Dubbo的@Service注解，一旦扫描到某个@Service注解就把它以及被它注解的类当做一个Dubbo服务，进行服务导出。</p><h4 id="实现流程-1" tabindex="-1"><a class="header-anchor" href="#实现流程-1" aria-hidden="true">#</a> 实现流程</h4><ul><li>spring启动</li><li>创建<strong>DubboClassPathBeanDefinitionScanner</strong>的bean，用来扫描Dubbo自定义的@Service注解</li><li>扫描有@Service注解的类，并生成对应的BeanDefinition</li><li>查找被@Service注解的类的BeanDefinition（无论这个类有没有被@ComponentScan注解标注了）</li><li>遍历BeanDefinition进行处理 <ul><li>获取@Service标注的实现类、@Service对应的Annotation对象、@Service属性信息、@Service实现类对应的接口、实现类的name</li><li>调用buildServiceBeanDefinition生成一个ServiceBean <ul><li>生成一个ServiceBean.class对应的BeanDefinition</li><li>将@Service对应的Annotation对象中的属性赋值到ServiceBean中</li><li>将实现类的name赋值到ServiceBean中的<strong>ref</strong>属性中，关联实现类</li><li>...进行属性赋值</li></ul></li><li>生成ServiceBean的名称并进行查重，ServiceBean名称为<strong>ServiceBean:cn.yaien.CatService</strong></li><li>注册ServiceBean到Spring容器中</li></ul></li><li>ServiceBean中监听spring启动完成事件，进行服务导出（服务注册）</li></ul>`,31),g=a('<h4 id="流程图-1" tabindex="-1"><a class="header-anchor" href="#流程图-1" aria-hidden="true">#</a> 流程图</h4><h3 id="referenceannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#referenceannotationbeanpostprocessor" aria-hidden="true">#</a> ReferenceAnnotationBeanPostProcessor</h3><p>ReferenceAnnotationBeanPostProcessor是处理@Reference注解的。其父类是AnnotationInjectedBeanPostProcessor，是一个InstantiationAwareBeanPostProcessorAdapter，是一个BeanPostProcessor。</p><p>Spring在对Bean进行依赖注入时会调用AnnotationInjectedBeanPostProcessor的postProcessPropertyValues()<br> 方法来给某个Bean按照ReferenceAnnotationBeanPostProcessor的逻辑进行依赖注入。 在注入之前会查找注入点，被@Reference注解的属性或方法都是注入点。</p><h4 id="实现流程-2" tabindex="-1"><a class="header-anchor" href="#实现流程-2" aria-hidden="true">#</a> 实现流程</h4><ul><li>spring启动</li><li>往spring注册一个ReferenceAnnotationBeanPostProcessor的后置处理器</li><li>调用AnnotationInjectedBeanPostProcessor.postProcessPropertyValues方法寻找需要注入的属性（被@Reference标注的Field）</li><li>调用doGetInjectedBean方法生成@Reference标注对象的一个代理对象 <ul><li>生成ServiceBean的名称referencedBeanName，用做查询是否有本地服务</li><li>通过@Reference注解信息生成referenceBeanName，用做缓存的key，value是对应服务的一个ReferenceBean</li><li>查询缓存有没有ReferenceBean，没有就创建一个，将@Reference注解信息赋值到configBean属性中</li><li>判断本地spring容器有没有指定的ServiceBean（通过referencedBeanName在spring中找对应的ServiceBean） <ul><li>如果有，生成一个代理对象（不直接用容器中的bean而是生成代理对象，是考虑到除对应方法需要执行外，还会有很多dubbo逻辑需要处理）</li><li>如果没有，将生成的ReferenceBean注入到spring容器</li></ul></li></ul></li></ul><h4 id="流程图-2" tabindex="-1"><a class="header-anchor" href="#流程图-2" aria-hidden="true">#</a> 流程图</h4>',7);function m(v,f){const e=o("RouterLink");return p(),i("div",null,[k,d,c(" more "),b,n("blockquote",null,[n("p",null,[s("服务导出还会处理很多的事情，不在这里继续深入。服务导出笔记可"),l(e,{to:"/note/microservices/dubbo/2305191622.html"},{default:u(()=>[s("点击")]),_:1}),s("前往查看")])]),g])}const h=t(r,[["render",m],["__file","2305172157.html.vue"]]);export{h as default};
