import{_ as s,o as t,c as e,d as p,a as n,b as a,e as o}from"./app-8f74759d.js";const c={},l=n("h1",{id:"jvm对象内存布局",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jvm对象内存布局","aria-hidden":"true"},"#"),a(" JVM对象内存布局")],-1),i=n("p",null,[a("Hotspot虚拟机中，将对象在内存中存储的布局分为三块："),n("strong",null,"对象头（Header）"),a("、"),n("strong",null,"实例数据（Instance Data）"),a("、"),n("strong",null,"对齐填充（Padding）")],-1),r=o(`<figure><img src="https://qiniu.yanggl.cn/image/202311091034325.png" alt="对象内存布局" tabindex="0" loading="lazy"><figcaption>对象内存布局</figcaption></figure><h2 id="对象头" tabindex="-1"><a class="header-anchor" href="#对象头" aria-hidden="true">#</a> 对象头</h2><p>HotSpot主要将对象头划分为：<strong>MarkWord</strong>、<strong>KlassPointer</strong>、<strong>数组长度</strong>，记录了对象Hash码、对象所属年代、对象锁、锁状态、偏向锁的线程ID、偏向时间、数组长度等等信息</p><h3 id="markword" tabindex="-1"><a class="header-anchor" href="#markword" aria-hidden="true">#</a> MarkWord</h3><p>MarkWord用于存储对象自身运行时的数据，例如哈希码（HashCode）、GC分代年龄、锁状态、持有锁的线程、偏向线程ID、偏向时间戳等。这部分数据的长度在32位和64位的虚拟机中分别占32bit和64bit。</p><ul><li><strong>32位MarkWord</strong></li></ul><figure><img src="https://qiniu.yanggl.cn/image/202311091048332.png" alt="32位MarkWord" tabindex="0" loading="lazy"><figcaption>32位MarkWord</figcaption></figure><ul><li><strong>64位MarkWord</strong></li></ul><figure><img src="https://qiniu.yanggl.cn/image/202311091048664.png" alt="64位MarkWord" tabindex="0" loading="lazy"><figcaption>64位MarkWord</figcaption></figure><blockquote><p>MarkWord结构搞得那么复杂，是因为需要节省内存，让同一内存区域在不同锁阶段有不同的用处</p></blockquote><ul><li><strong>hash</strong>：保存对象的哈希码，在运行期间调用System.identityHashCode()进行计算，这是一个延迟计算，并将结果赋值到hash内存中</li><li><strong>age</strong>：保存对象的分代年龄。记录对象被GC的次数，当该次数到达阈值后就会由年轻代转入老年代</li><li><strong>biased_lock</strong>：偏向锁标识位。由于无锁和偏向锁的锁标识都是记01，为了区分引入了一位来标识是否为偏向锁</li><li><strong>lock</strong>：锁状态标识。区分锁状态，比如00时表示轻量锁，只有最后2位锁标识（00）有效</li><li><strong>JavaThread</strong>：保存持有偏向锁的线程ID。当处于偏行模式时，有线程持有对象，则对象的这里就会保存持有线程的ID，后续再获取锁时就无需再进行尝试获取锁的动作</li><li><strong>epoch</strong>：保存偏向时间戳。偏向锁再CAS锁操作过程中，偏向性标识，标识对象更偏向哪个锁</li></ul><h3 id="klasspointer" tabindex="-1"><a class="header-anchor" href="#klasspointer" aria-hidden="true">#</a> KlassPointer</h3><p>KlassPointer又称类型指针，是指向对象的类元数据的指针。虚拟机可以通过这个指针来确定这个对象是那个类的实例。</p><p>在32位的JVM内，类型指针占4byte<br> 在64位的JVM内，类型指针正常占8byte，若开启<strong>指针压缩</strong>或者<strong>最大堆内存小于32G</strong>时占4byte。JDK8后默认开启指针压缩</p><h3 id="数组长度" tabindex="-1"><a class="header-anchor" href="#数组长度" aria-hidden="true">#</a> 数组长度</h3><p>如果这个对象是一个数组，则对象头中会有一块4byte长度数数据区用于记录数组的长度，如果不是数组则这部分长度为0</p><figure><img src="https://qiniu.yanggl.cn/image/202311091135325.png" alt="Header内存占用" tabindex="0" loading="lazy"><figcaption>Header内存占用</figcaption></figure><h2 id="内存布局查看实战" tabindex="-1"><a class="header-anchor" href="#内存布局查看实战" aria-hidden="true">#</a> 内存布局查看实战</h2><p>为了验证对象内存布局，可使用Java对象的内部布局工具<strong>JOL(JAVA OBJECT LAYOUT)</strong><br> ，用此工具可以查看new出来的一个java对象的内部布局,以及一个普通的java对象占用多少字节。</p><p>Maven依赖引入</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--  JAVA对象布局、大小查看  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>案例</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>开启指针压缩</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>java.lang.Object object internals:
OFF  SZ   TYPE DESCRIPTION               VALUE
  <span class="token number">0</span>   <span class="token number">8</span>        <span class="token punctuation">(</span>object header: mark<span class="token punctuation">)</span>     0x0000000000000001 <span class="token punctuation">(</span>non-biasable<span class="token punctuation">;</span> age: <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token number">8</span>   <span class="token number">4</span>        <span class="token punctuation">(</span>object header: class<span class="token punctuation">)</span>    0xf80001e5
 <span class="token number">12</span>   <span class="token number">4</span>        <span class="token punctuation">(</span>object alignment gap<span class="token punctuation">)</span>    
Instance size: <span class="token number">16</span> bytes
Space losses: <span class="token number">0</span> bytes internal + <span class="token number">4</span> bytes external <span class="token operator">=</span> <span class="token number">4</span> bytes total
</code></pre></div><ul><li>未开启指针压缩</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>java.lang.Object object internals:
OFF  SZ   TYPE DESCRIPTION               VALUE
  <span class="token number">0</span>   <span class="token number">8</span>        <span class="token punctuation">(</span>object header: mark<span class="token punctuation">)</span>     0x0000000000000001 <span class="token punctuation">(</span>non-biasable<span class="token punctuation">;</span> age: <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token number">8</span>   <span class="token number">8</span>        <span class="token punctuation">(</span>object header: class<span class="token punctuation">)</span>    0x000000001beb1c00
Instance size: <span class="token number">16</span> bytes
Space losses: <span class="token number">0</span> bytes internal + <span class="token number">0</span> bytes external <span class="token operator">=</span> <span class="token number">0</span> bytes total
</code></pre></div><blockquote><ul><li>OFF：偏移地址（Byte）</li><li>SZ：内存占用大小（Byte）</li><li>TYPE DESCRIPTION：类型描述，object header为对象头，object alignment gap为对齐补充</li><li>VALUE：对应内存中当前存储的值</li></ul></blockquote>`,28);function u(k,g){return t(),e("div",null,[l,i,p(" more "),r])}const b=s(c,[["render",u],["__file","2311091006.html.vue"]]);export{b as default};
