import{_ as s,o as a,c as t,d as p,a as n,b as e,e as c}from"./app-f39fbfe2.js";const o={},i=n("h1",{id:"redis高并发缓存实战",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis高并发缓存实战","aria-hidden":"true"},"#"),e(" Redis高并发缓存实战")],-1),l=n("p",null,"记录高并发场景下Redis部署、使用、存在的问题以及处理方案等",-1),u=c(`<h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><p>在中小并发场景下，我们在使用缓存架构基本的业务流程是：</p><ol><li>查询缓存，缓存存在则返回</li><li>缓存没有，查找数据库，更新缓存</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 查询商品信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">productId</span> 商品ID
     * <span class="token keyword">@return</span> 商品信息
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductDetail</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Product</span> product<span class="token punctuation">;</span>

        <span class="token comment">// step1: 查询缓存，缓存存在，直接返回</span>
        <span class="token class-name">String</span> productCacheKey <span class="token operator">=</span> <span class="token class-name">RedisConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE_PREFIX</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>
        <span class="token class-name">String</span> productStr <span class="token operator">=</span> redisCacheUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>productStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>productStr<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> product<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// step2: 缓存不存在，尝试从数据库查询</span>
        product <span class="token operator">=</span> productRepository<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// step3: 数据库中存在，刷新到缓存中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redisCacheUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述代码实现了一个简单的缓存架构，当有请求获取商品信息时，先去缓存中查询，如果缓存中存在则直接返回缓存的商品信息；缓存中没有则请求数据库获取，如果数据库存在该商品信息，更新到缓存中，并返回商品信息。</p></blockquote><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a> 缓存穿透</h3><p><strong>缓存穿透</strong>指查询一个<strong>不存在的数据</strong>。通常情况下，出于对容错以及数据一致的考虑，存储层不存在的数据并不会写入缓存层，而在调用查询接口时，缓存层以及存储层都不存在该数据。</p><p><strong>缓存穿透</strong>的情况就会导致每一次请求都会到存储层查询数据，而缓冲层起不到任何作用，失去了保护的意义。</p><h4 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h4><ul><li>自身业务代码或者数据出现问题</li><li>恶意攻击、爬虫等</li></ul><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h4><ol><li><p>缓存空对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 查询商品信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">productId</span> 商品ID
     * <span class="token keyword">@return</span> 商品信息
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductDetail</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">Product</span> product<span class="token punctuation">;</span>

       <span class="token comment">// step1: 查询缓存，缓存存在，直接返回</span>
       <span class="token class-name">String</span> productCacheKey <span class="token operator">=</span> <span class="token class-name">RedisConst</span><span class="token punctuation">.</span><span class="token constant">PRODUCT_CACHE_PREFIX</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>
       <span class="token class-name">String</span> productStr <span class="token operator">=</span> redisCacheUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>productStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment">// step1.1：判断是否为空对象</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">EMPTY_CACHE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>productStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               redisCacheUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token function">getRandomEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
           product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>productStr<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> product<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment">// step3: 数据库中存在，刷新到缓存中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redisCacheUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// step4: 数据库中不存在，刷新空对象到缓存中，并设置较短的过期时间，避免空对象占用过多内存</span>
            redisCacheUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">getEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述代码中，当查询数据库也不存在数据时，缓存一个空对象来应对高并发下对同一个商品的查询请求；<br> 同时加一个短暂的过期时间，以应对恶意请求不同商品时导致缓存过多空对象引起的内存过度消耗。</p></blockquote></li><li><p>使用布隆过滤器</p><p>布隆过滤器（Bloom Filter）由布隆（Burton Howard Bloom）在1970年提出的。它是由一个<strong>很长的二进制向量</strong>和**一系列随机映射函数<br> **组成，本质上由一个长度为m的位向量组成。</p><p>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的<strong>误识别率</strong>（存在的数据一定存在，不存在的数据可能存在）和<br><strong>删除困难</strong>。</p><p>详情查看 <strong>布隆过滤器简述</strong> 文章</p></li></ol><h3 id="缓存失效" tabindex="-1"><a class="header-anchor" href="#缓存失效" aria-hidden="true">#</a> 缓存失效</h3><p><strong>缓存失效</strong>指存在大批量的缓存在同一时间过期（失效），导致大量的请求越过缓存层直接请求存储层，造成存储层压力过大甚至宕机不再提供服务。</p><h4 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1" aria-hidden="true">#</a> 解决方案</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 查询商品信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">productId</span> 商品ID
     * <span class="token keyword">@return</span> 商品信息
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductDetail</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        
        <span class="token comment">// step3: 数据库中存在，刷新到缓存中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redisCacheUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getRandomCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// step4: 数据库中不存在，刷新空对象到缓存中，并设置较短的过期时间，避免空对象占用过多内存</span>
            redisCacheUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token function">genEmptyRandomCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 获取缓存超时时间
     *
     * <span class="token keyword">@return</span> 超时时间
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">getRandomCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">PRODUCT_CACHE_TIMEOUT</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取空缓存超时时间
     * <span class="token keyword">@return</span> 超时时间
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">getRandomEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">60</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述代码中，在查询数据库数据并更新缓存时，获取的超时时间添加随机数获取，错开超时时间，防止同一时间大批量缓存过期。</p></blockquote><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a> 缓存雪崩</h3><p><strong>缓存雪崩</strong>指缓存层由于某些原因支撑不住宕机后，流量像洪流一样打到存储层，存储层调用量暴增，甚至导致存储层压力过大，最终造成存储层也宕机的情况。</p><h4 id="原因-1" tabindex="-1"><a class="header-anchor" href="#原因-1" aria-hidden="true">#</a> 原因</h4><ul><li>超大并发</li><li>缓存中存在大量的<strong>big key</strong></li><li>缓存设计不佳</li></ul><h4 id="解决方案-2" tabindex="-1"><a class="header-anchor" href="#解决方案-2" aria-hidden="true">#</a> 解决方案</h4><ul><li>使用<strong>Redis Sentinel</strong>或者<strong>Redis Cluster</strong>来保证缓存层服务高可用</li><li>引入<strong>Sentinel</strong>或者<strong>Hystrix</strong>等组件为后端服务进行限流、熔断、降级</li><li>提前模拟、演练后端负载情况下可能存在的问题，并在此基础上做一些预案设定</li></ul><h3 id="热点缓存重建" tabindex="-1"><a class="header-anchor" href="#热点缓存重建" aria-hidden="true">#</a> 热点缓存重建</h3><p>在使用<strong>缓存+过期时间</strong>的策略，可以加速数据读写，同时还保证数据能够定期更新，基本能够满足大部分的需求。</p><p>但是当这个key是一个热点key（高并发），并发量大。当这个key失效之后，又不能在短时间内再次缓存起来时，在<strong>缓存失效</strong>的这段时间内，大量请求同时越过缓存层尝试请求存储层获取数据并重建缓存，从而导致存储层压力增大甚至造成<strong>缓存雪崩</strong>。</p><h4 id="解决方案-3" tabindex="-1"><a class="header-anchor" href="#解决方案-3" aria-hidden="true">#</a> 解决方案</h4><p>主要就是如何避免大量请求同时重建缓存。可以通过加互斥锁来控制只允许一个线程重建缓存，其他线程等待缓存重建完成后从缓存中获取即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 查询商品信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">productId</span> 商品ID
     * <span class="token keyword">@return</span> 商品信息
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getProductDetail</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token comment">// step1.2：获取分布式互斥锁</span>
        <span class="token class-name">RLock</span> hotLock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token constant">LOCK_PRODUCT_HOT_CACHE_PREFIX</span> <span class="token operator">+</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 加互斥锁</span>
        hotLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// step1.3: 再次尝试查询缓存，缓存存在，直接返回</span>
            productStr <span class="token operator">=</span> redisCacheUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>productStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">EMPTY_CACHE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>productStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    redisCacheUtil<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>productCacheKey<span class="token punctuation">,</span> <span class="token function">getRandomEmptyCacheTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                product <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>productStr<span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> product<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 解锁</span>
            hotLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上述代码使用<strong>Redisson</strong>实现了分布式互斥锁，单线程去存储层获取商品信息并重建缓存，采用<strong>双重检查</strong>的方式来处理等待线程去获取锁时，会再次判断缓存是否已经重建成功，成功直接返回。</p></blockquote><h3 id="数据不一致" tabindex="-1"><a class="header-anchor" href="#数据不一致" aria-hidden="true">#</a> 数据不一致</h3>`,31);function d(r,k){return a(),t("div",null,[i,l,p(" more "),u])}const m=s(o,[["render",d],["__file","2312280935.html.vue"]]);export{m as default};
