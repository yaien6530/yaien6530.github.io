import{_ as a,o as s,c as t,d as p,a as n,b as e,e as o}from"./app-7b144a51.js";const c={},l=n("h1",{id:"springmvc-基础-一",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#springmvc-基础-一","aria-hidden":"true"},"#"),e(" SpringMVC 基础（一）")],-1),i=n("p",null,"SpringMVC 基础笔记系列",-1),u=o(`<h2 id="springmvc框架" tabindex="-1"><a class="header-anchor" href="#springmvc框架" aria-hidden="true">#</a> SpringMVC框架</h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>SpringMVC框架解决了V与C的交互问题。</p><p>原生的<code>Servlet</code>就是控制器，使用Servlet主要存在的问题是实例太多，配置麻烦，管理难度大等一系列的问题。例如项目中有用户注册功能，则可能需要开发<code>UserRegisterServlet</code><br> ，如果还有登录功能，则可能需要开发<code>UserLoginServlet</code>，几乎是每个功能需要有1个对应的<code>Servlet</code>，如果一个项目中有200个不同的功能，则需要200个<code>Servlet</code>，在更大的系统中，<code>Servlet</code><br> 的数量就非常多，在实际运行时，在内存中的<code>Servlet</code>对象就会占据大量的内存空间！由于<code>Servlet</code>的数量很多，进而导致配置文件的配置信息会非常多，配置信息多了以后，就会引发管理难度大的问题。</p><h3 id="springmvc中的核心组件" tabindex="-1"><a class="header-anchor" href="#springmvc中的核心组件" aria-hidden="true">#</a> SpringMVC中的核心组件</h3><ul><li><p><code>DispatcherServlet</code>：前端控制器，用于接收所有请求，并负责分发；</p></li><li><p><code>HandlerMapping</code>：根据请求路径映射控制器或控制器的方法，确定请求路径与控制器或控制器中的方法的对应关系；</p></li><li><p><code>Controller</code>：实际处理请求的组件；</p></li><li><p><code>ModelAndView</code>：控制器的返回结果，包括处理完成后的数据，及最终应该响应给客户端的视图名称；</p></li><li><p><code>ViewResolver</code>：根据视图名称得到具体的视图组件。</p></li></ul><p>具体的执行流程图：</p><h2 id="springmvc-helloworld" tabindex="-1"><a class="header-anchor" href="#springmvc-helloworld" aria-hidden="true">#</a> SpringMVC HelloWorld</h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标" aria-hidden="true">#</a> 目标</h3><p>在浏览器中通过<code>http://localhost:8080/项目名称/hello.do</code>可以访问某个JSP显示的页面，页面中显示**Hello, SpringMVC!!!**字样。</p><h3 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h3><p>创建<strong>Maven Project</strong>，<strong>Artifact Id</strong>为<code>cn.tedu.spring</code>，<strong>Artifact Id</strong>为<code>SPRINGMVC01</code>，<strong>Packaing</strong>必须选择<code>war</code>。</p><p>创建完成后，首先生成<strong>web.xml</strong>文件。</p><p>然后，在<strong>pom.xml</strong>中添加<code>spring-webmvc</code>的依赖。</p><p>然后，将Spring的配置文件复制到<strong>src/main/resources</strong>下。</p><p>另外，还需要添加Tomcat运行环境。</p><h3 id="配置dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#配置dispatcherservlet" aria-hidden="true">#</a> 配置DispatcherServlet</h3><p>打开<strong>web.xml</strong>，在配置文件中对<code>DispatcherServlet</code>进行配置，使之可以处理所有以<code>.do</code>结尾的请求：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringMVC框架是基于Spring框架的，后续开发的组件也应该随着项目启动就完成初始化，例如自定义的控制器类等等，也就意味着当项目启动时，就应该加载Spring的配置文件(spring.xml)。</p><p>在<code>DispatcherServlet</code>的父类<code>FrameworkServlet</code>中定义了名为<code>contextConfigLocation</code>的属性，当<code>DispatcherServlet</code><br> 初始化时，会自动读取该属性的值，而该属性的值应该是配置文件的路径，则<code>DispatcherServlet</code>就会自动加载配置文件！</p><p>所以，还应该对<code>DispatcherSerlvet</code>的<code>contextConfigLocation</code>属性进行配置，值是Spring的配置文件，并保证<code>DispatcherServlet</code>是默认启动的：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成以上配置后，如果需要检测配置是否成功，可以在Spring的配置文件中添加组件扫描：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.spring<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>然后，创建<code>cn.tedu.spring.User</code>类，为该类添加注解，并自定义构造方法：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Component</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;初始化User对象。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>当把项目部署到Tomcat时，Tomcat启动就会初始化<code>DispatcherServlet</code>，由于配置了初始化参数<code>contextConfigLocation</code>，就会加载Spring的配置文件，在配置文件中执行组件扫描，扫描到<code>User</code><br> 时，由于<code>User</code>类添加了注解，Spring就会创建<code>User</code>类的对象，也就是执行了无参数的构造方法，则会执行以上代码中的输出语句！总的来说，启动Tomcat就可以看到以上输出语句！</p><h3 id="通过控制器接收请求" tabindex="-1"><a class="header-anchor" href="#通过控制器接收请求" aria-hidden="true">#</a> 通过控制器接收请求</h3><p>自定义控制器类<code>cn.tedu.spring.HelloController</code>，在类之前添加<code>@Controller</code>注解：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Controller</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>然后，在类中添加方法以处理请求，关于方法的设计：</p><ul><li><p>应该使用<code>public</code>权限；</p></li><li><p>暂时使用<code>String</code>作用方法的返回值类型；</p></li><li><p>方法的名称可以自由定义；</p></li><li><p>方法可以没有参数。</p></li></ul><p>则可以添加：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>然后，在方法之前使用<code>@RequestMapping(&quot;请求路径&quot;)</code>来配置请求路径：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;hello.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>则实现了请求路径与处理请求的方法的映射关系，即：当请求<code>hello.do</code>时，就会自动调用<code>showHello()</code>方法！</p><p>可以在以上方法中输出日志，以观察运行效率，暂时不关心返回值，所以，测试运行时页面将提示404错误，暂时是正常的：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;hello.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloController.showHello()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>最后，重新启动项目，通过<code>http://localhost:8080/SPRINGMVC01/hello.do</code>进行访问，在浏览器中会提示404，并在Eclipse的控制台中可以看到以上输出语句的内容！</p><h3 id="显示页面" tabindex="-1"><a class="header-anchor" href="#显示页面" aria-hidden="true">#</a> 显示页面</h3><p>首先，在<strong>webapp/WEB-INF/hello.jsp</strong>页面，用于显示。</p><p>在控制器处理请求的方法中，返回的<code>String</code>值表示“视图名称”，将根据视图解析器<code>ViewResolver</code>进行解析，得到以上创建的JSP文件。</p><p>实际使用的<code>InternalResourceViewResolver</code>的工作原理就是以<strong>webapp</strong>作为根路径，“前缀 + 控制器返回的字符串 + 后缀”得到文件位，所以，可以配置为：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 前缀 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 后缀 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>然后，控制器的方法必须返回<code>&quot;hello&quot;</code>，这样，前缀与返回值与后缀拼接起来，就可以得到<code>/WEB-INF/hello.jsp</code>。</p><p>最后，在浏览器再次访问，可以看到JSP页面设计的内容。</p>`,48);function r(d,k){return s(),t("div",null,[l,i,p(" more "),u])}const v=a(c,[["render",r],["__file","2102202010.html.vue"]]);export{v as default};
