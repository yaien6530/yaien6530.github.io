import{_ as e,o as t,c as i,d as n,a,b as r,e as o}from"./app-4f9dbd97.js";const s={},c=a("h1",{id:"jvm简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jvm简介","aria-hidden":"true"},"#"),r(" JVM简介")],-1),d=a("p",null,"Java虚拟机（JVM）是Java程序运行行的关键组件，他负责将Java源代码转换为可执行的机器码。主要由：类加载器、运行时数据区、执行引擎、本地库接口组成。",-1),h=o('<figure><img src="https://qiniu.yanggl.cn/image/2305052159_1.png" alt="JVM组成" tabindex="0" loading="lazy"><figcaption>JVM组成</figcaption></figure><h2 id="类加载器-classload" tabindex="-1"><a class="header-anchor" href="#类加载器-classload" aria-hidden="true">#</a> 类加载器（ClassLoad）</h2><p>类加载器主要负责将Java字节码文件加载到内存中，以便程序运行时使用。</p><h2 id="运行时数据区-runtime-data-area" tabindex="-1"><a class="header-anchor" href="#运行时数据区-runtime-data-area" aria-hidden="true">#</a> 运行时数据区（Runtime Data Area）</h2><p>运行时数据区是JVM内存的一部分，用于存储程序运行时的数据。它包括以下几个区域：</p><ul><li><strong>程序计数器（Program Counter Register）：</strong> 记录当前线程执行的字节码行号，用于指示下一条需要执行的指令。</li><li><strong>Java虚拟机栈（Java Virtual Machine Stacks）：</strong> 描述Java方法执行的内存模型，包括局部变量表、操作数栈、动态链接等信息。</li><li><strong>本地方法栈（Native Method Stack）：</strong> 为虚拟机调用Native方法服务。</li><li><strong>Java堆（Java Heap）：</strong> 存放对象实例，是Java虚拟机中内存最大的一块，被所有线程共享。</li><li><strong>方法区（Method Area）：</strong> 存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</li></ul><h2 id="执行引擎-execution-engine" tabindex="-1"><a class="header-anchor" href="#执行引擎-execution-engine" aria-hidden="true">#</a> 执行引擎（Execution Engine）</h2><p>执行引擎将字节码翻译成底层系统指令，再交由CPU执行</p><h2 id="本地库接口-native-interface" tabindex="-1"><a class="header-anchor" href="#本地库接口-native-interface" aria-hidden="true">#</a> 本地库接口（Native Interface）</h2><p>本地库接口用于扩展Java平台的功能，融合不同编程语言的功能为Java使用。通过本地库接口，Java程序可以调用本地代码库中的功能，实现对特定平台资源的访问和操作。</p>',10);function l(g,u){return t(),i("div",null,[c,d,n(" more "),h])}const _=e(s,[["render",l],["__file","2305052159.html.vue"]]);export{_ as default};
