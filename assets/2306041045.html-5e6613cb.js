const e=JSON.parse('{"key":"v-ba51a5ea","path":"/note/java/concurrency/queue/2306041045.html","title":"BlockingQueue详解","lang":"zh-CN","frontmatter":{"isOriginal":true,"date":"2023-06-04T00:00:00.000Z","order":1,"category":["并发"],"tag":["线程安全","Queue"]},"headers":[{"level":2,"title":"Queue接口","slug":"queue接口","link":"#queue接口","children":[]},{"level":2,"title":"核心方法","slug":"核心方法","link":"#核心方法","children":[]},{"level":2,"title":"主要实现","slug":"主要实现","link":"#主要实现","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}],"git":{"createdTime":1699542272000,"updatedTime":1699542272000,"contributors":[{"name":"yaien","email":"80998775+yaien6530@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"note/java/concurrency/queue/2306041045.md","localizedDate":"2023年6月4日","excerpt":"<h1> BlockingQueue详解</h1>\\n<p>BlockingQueue是java.util.concurrent包下的一个接口，它是Queue接口的一个子接口。相比于普通的Queue，BlockingQueue的主要特性是，当试图向满的队列中添加元素或从空的队列中获取元素时，队列会阻塞插入/获取操作。这两种操作使得BlockingQueue适合用于生产者-消费者模型，在多线程环境中处理数据共享问题。</p>\\n","copyright":{"author":"Yaien","license":"MIT"}}');export{e as data};
