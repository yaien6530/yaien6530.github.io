import{_ as n,U as s,a5 as a,a8 as t}from"./framework-a4fc28af.js";const p={},e=t(`<h1 id="springmvc-基础-二" tabindex="-1"><a class="header-anchor" href="#springmvc-基础-二" aria-hidden="true">#</a> SpringMVC 基础（二）</h1><p>SpringMVC 基础笔记系列</p><h2 id="接收请求参数" tabindex="-1"><a class="header-anchor" href="#接收请求参数" aria-hidden="true">#</a> 接收请求参数</h2><h3 id="不推荐-使用httpservletrequest" tabindex="-1"><a class="header-anchor" href="#不推荐-使用httpservletrequest" aria-hidden="true">#</a> (不推荐) 使用HttpServletRequest</h3><p>在处理请求的方法的参数列表中添加<code>HttpServletRequest</code>参数，然后，在处理过程中，调用<code>request</code>的<code>getParameter()</code>方法即可获取各请求参数的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_register.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleRegister</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleRegister()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Integer</span> age <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> phone <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> email <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tusername=&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tpassword=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tage=&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tphone=&quot;</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\temail=&quot;</span> <span class="token operator">+</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上做法的不足有：</p><ul><li><p>如果期望的数据类型不是<code>String</code>，需要自行转换！</p></li><li><p>获取数据的操作比较繁琐；</p></li><li><p>不便于执行单元测试。</p></li></ul><h3 id="推荐-将请求参数设计为处理请求的方法的参数" tabindex="-1"><a class="header-anchor" href="#推荐-将请求参数设计为处理请求的方法的参数" aria-hidden="true">#</a> (推荐) 将请求参数设计为处理请求的方法的参数</h3><p>当需要获取请求参数时，直接将它们添加到处理请求的方法的参数列表中即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_register.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleRegister</span><span class="token punctuation">(</span>
			<span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> 
			<span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleRegister()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tusername=&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tpassword=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tage=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tphone=&quot;</span> <span class="token operator">+</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\temail=&quot;</span> <span class="token operator">+</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种操作要求请求参数的名称与处理请求的方法的参数名称保持一致！如果名称不一致，则处理请求的方法中的参数值将是<code>null</code>。</p><p>在设计处理请求的方法的参数列表时，各参数的类型可以直接声明为期望的数据类型，例如期望名为<code>age</code>的量是<code>Integer</code>类型，则直接声明为<code>Integer</code>即可，无需在方法中自行转换！</p><p>这种做法的缺陷在于：不适合处理过多的请求参数。</p><h3 id="推荐-使用封装的类型作为处理请求的方法的参数" tabindex="-1"><a class="header-anchor" href="#推荐-使用封装的类型作为处理请求的方法的参数" aria-hidden="true">#</a> (推荐) 使用封装的类型作为处理请求的方法的参数</h3><p>当请求参数较多时，可以将这些参数封装到1个自定义的类型中：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
	
		<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

	<span class="token punctuation">}</span>
</code></pre></div><p>然后，将自定义的数据类型作为处理请求的方法的参数即可：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_register.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleRegister</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleRegister()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>同样，这种做法仍要求请求参数的名称，与封装的类型中的属性名称保持一致！</p><p>这种做法还有1个优点：当请求参数的数量发生变化时，也许处理请求的方法的参数列表可以不用调整，而只调整自定义的封装类型即可。</p><h3 id="如何选取各种获取请求参数的方式" tabindex="-1"><a class="header-anchor" href="#如何选取各种获取请求参数的方式" aria-hidden="true">#</a> 如何选取各种获取请求参数的方式</h3><p>第1种做法是始终不推荐的，即完全不使用第1种做法。</p><p>如果参数的数量较多，应该优先选取第3种做法；如果参数的数量可能发生变化，应该优先选取第3种做法；如果参数的数量较少且固定，应该优先选取第2种做法。</p><p>另外，第2种做法和第3种做法可以混合在一起使用！</p><h2 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h2><p>在处理请求的方法中，返回<code>String</code>类型的结果时，返回值使用<code>redirect:</code>作为前缀，则表示重定向！在<code>redirect:</code>右侧的必须是重定向到的目标的相对定位或绝对定义的URL，例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">return</span> <span class="token string">&quot;redirect:xxx.do&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>假设当前用户的注册一定能成功，且注册成功后显示登录页面，则：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_register.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleRegister</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleRegister()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token string">&quot;redirect:login.do&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><h2 id="转发数据" tabindex="-1"><a class="header-anchor" href="#转发数据" aria-hidden="true">#</a> 转发数据</h2><h3 id="不推荐-通过httpservletrequest参数封装转发的数据" tabindex="-1"><a class="header-anchor" href="#不推荐-通过httpservletrequest参数封装转发的数据" aria-hidden="true">#</a> (不推荐) 通过HttpServletRequest参数封装转发的数据</h3><p>在SpringMVC中，如果方法的返回值类型是<code>String</code>类型，默认转发！</p><p>假设在控制器的方法中处理登录时，只有<strong>root/1234</strong>是正确的用户名和密码，登录成功后重定向到主页，而登录失败，将错误信息转发到**/WEB-INF/error.jsp**错误页面。</p><p>当需要转发时，可以在处理请求的方法中添加<code>HttpServletRequest</code>参数，在使用时，调用参数对象的<code>setAttribute()</code>方法即可封装转发的数据，然后，执行转发即可(无需获取转发器等)：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_login.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleLogin();&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tusername=&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tpassword=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 定义错误提示信息</span>
		<span class="token class-name">String</span> errorMessage<span class="token punctuation">;</span>
		<span class="token comment">// 判断用户名是否正确</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用户名正确，继续判断密码是否正确</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 密码也正确，则登录成功，重定向到主页</span>
				<span class="token keyword">return</span> <span class="token string">&quot;redirect:index.do&quot;</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 密码错误，先准备好错误提示</span>
				errorMessage <span class="token operator">=</span> <span class="token string">&quot;登录失败！密码错误！&quot;</span><span class="token punctuation">;</span>
				<span class="token comment">// 将错误提示封装到请求对象中</span>
				request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 执行转发</span>
				<span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用户名错误</span>
			errorMessage <span class="token operator">=</span> <span class="token string">&quot;登录失败！用户名不存在！&quot;</span><span class="token punctuation">;</span>
			request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更不推荐-使用modelandview" tabindex="-1"><a class="header-anchor" href="#更不推荐-使用modelandview" aria-hidden="true">#</a> (更不推荐) 使用ModelAndView</h3><p>可以使用<code>ModelAndView</code>作为处理请求的方法的返回值类型，在该类型的对象中，设置其<code>viewName</code>属性即可确定需要转发到的视图名称，另外还使用了<code>Map&lt;String, ?&gt;</code>类型的数据作为需要转发的数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_login.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleLogin();&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tusername=&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tpassword=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 准备返回值对象</span>
		<span class="token class-name">ModelAndView</span> mav<span class="token punctuation">;</span>
		<span class="token comment">// 封装转发的数据的Map</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 定义错误提示信息</span>
		<span class="token class-name">String</span> errorMessage<span class="token punctuation">;</span>
		<span class="token comment">// 判断用户名是否正确</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用户名正确，继续判断密码是否正确</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 密码也正确，则登录成功，重定向到主页</span>
				<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 密码错误，先准备好错误提示</span>
				errorMessage <span class="token operator">=</span> <span class="token string">&quot;登录失败！密码错误！&quot;</span><span class="token punctuation">;</span>
				<span class="token comment">// 将错误提示封装到请求对象中</span>
				model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
				mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 执行转发</span>
				<span class="token keyword">return</span> mav<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用户名错误</span>
			errorMessage <span class="token operator">=</span> <span class="token string">&quot;登录失败！用户名不存在！&quot;</span><span class="token punctuation">;</span>
			model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
			mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> mav<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推荐-使用modelmap封装转发的数据" tabindex="-1"><a class="header-anchor" href="#推荐-使用modelmap封装转发的数据" aria-hidden="true">#</a> (推荐) 使用ModelMap封装转发的数据</h3><p>使用方式与使用<code>HttpServletRequest</code>是相同的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;handle_login.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;UserController.handleLogin();&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tusername=&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\tpassword=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 定义错误提示信息</span>
		<span class="token class-name">String</span> errorMessage<span class="token punctuation">;</span>
		<span class="token comment">// 判断用户名是否正确</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用户名正确，继续判断密码是否正确</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;1234&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 密码也正确，则登录成功，重定向到主页</span>
				<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token comment">// 密码错误，先准备好错误提示</span>
				errorMessage <span class="token operator">=</span> <span class="token string">&quot;[ModelMap] 登录失败！密码错误！&quot;</span><span class="token punctuation">;</span>
				<span class="token comment">// 将错误提示封装到请求对象中</span>
				modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 执行转发</span>
				<span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用户名错误</span>
			errorMessage <span class="token operator">=</span> <span class="token string">&quot;[ModelMap] 登录失败！用户名不存在！&quot;</span><span class="token punctuation">;</span>
			modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于-requestmapping注解" tabindex="-1"><a class="header-anchor" href="#关于-requestmapping注解" aria-hidden="true">#</a> 关于@RequestMapping注解</h2><p>在处理请求的方法之前添加<code>@RequestMapping</code>用于配置请求路径与处理响应的方法之间的映射。</p><p>该注解也可以添加在类的声明之前，例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Controller</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>添加在类之前的<code>@RequestMapping</code>注解用于配置请求路径中的层次！将作用于当前类中配置的所有请求路径！原有的例如<code>login.do</code>的请求路径就会变成<code>user/login.do</code>。</p><p>无论是添加在类之前配置路径，还是在方法之前配置路径，在配置时，路径的左右两侧都可以添加<code>/</code>符号，例如：</p><pre><code>@RequestMapping(&quot;/user/&quot;)
</code></pre><p>在使用该注解时，对左右两侧的<code>/</code>是没有要求的，例如在类和方法之前分别配置：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	user		login<span class="token punctuation">.</span><span class="token keyword">do</span>
	<span class="token operator">/</span>user		<span class="token operator">/</span>login<span class="token punctuation">.</span><span class="token keyword">do</span>
	<span class="token operator">/</span>user<span class="token operator">/</span>		<span class="token operator">/</span>login<span class="token punctuation">.</span><span class="token keyword">do</span>
	<span class="token operator">/</span>user<span class="token operator">/</span>		login<span class="token punctuation">.</span><span class="token keyword">do</span>
</code></pre></div><p>以上各种配置方式都是正确的！在实际使用时，应该保持自己的代码风格统一！</p><p>在实际应用中，推荐为每一个类都添加该注解！</p><p>配置注解中的<code>value</code>属性或<code>path</code>属性，可以配置请求路径与处理请求的方法的映射，且值可以是数组类型：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;hahaha&quot;</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;reg.do&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;register.do&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>可以在注解中配置<code>method</code>属性，以限制某个请求路径的允许使用的若干种请求方式，例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;handle_login.do&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span>
</code></pre></div><p>或：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&quot;handle_login.do&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><p>如果使用错误的请求方式发出请求，则会导致405错误：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token constant">HTTP</span> <span class="token class-name">Status</span> <span class="token number">405</span> <span class="token operator">-</span> <span class="token class-name">Request</span> method <span class="token char">&#39;GET&#39;</span> not supported
</code></pre></div><h2 id="关于-requestparam注解" tabindex="-1"><a class="header-anchor" href="#关于-requestparam注解" aria-hidden="true">#</a> 关于@RequestParam注解</h2><p><code>@RequestParam</code>是添加在请求参数之前的注解！</p><p>使用该注解可以解决客户端提交的请求参数名称，与服务器端的处理请求的方法的参数名称不统一的问题：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username
</code></pre></div><p>当添加以上注解后，默认情况下，该参数就是必须提交的，如果请求中没有提交该参数，就会出现400错误：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token constant">HTTP</span> <span class="token class-name">Status</span> <span class="token number">400</span> <span class="token operator">-</span> <span class="token class-name">Required</span> <span class="token class-name">String</span> parameter <span class="token char">&#39;uname&#39;</span> is not present
</code></pre></div><p>这种表现是由于该属性中的<code>required</code>属性决定的，在该注解的源代码：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre></div><p>所以，如果并不强制要求客户端提交该参数，可以：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre></div><p>另外，还可以配置<code>defaultValue</code>属性，用于配置默认值，即当客户端没有提交该请求参数时，视为客户端提交了某个值：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue<span class="token operator">=</span><span class="token string">&quot;JSD1902&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>当然，在设置<code>defaultValue</code>时，需要显式的将<code>required</code>设置为<code>false</code>。</p><p>所以，通常<code>@RequestParam</code>注解的使用场景：</p><ul><li><p>客户端提交的请求参数名称与服务器端处理请求的方法的参数名称不一致时；</p></li><li><p>强制要求客户端提交某些参数时；</p></li><li><p>需要为某些请求参数设置默认值时。</p></li></ul>`,76),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","2102202011.html.vue"]]);export{r as default};
