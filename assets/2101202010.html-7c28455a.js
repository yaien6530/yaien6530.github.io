import{_ as a,o as s,c as t,d as p,a as n,b as e,e as c}from"./app-6a63891c.js";const o={},l=n("h1",{id:"spring-基础-一",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-基础-一","aria-hidden":"true"},"#"),e(" Spring 基础（一）")],-1),u=n("p",null,"Spring 基础笔记系列",-1),i=c(`<h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架" aria-hidden="true">#</a> 框架</h2><blockquote><p>开发人员可以在项目开发过程中，引用某些框架，从而，在开发过程中，就可以不必关心某些功能的开发，而是由框架直接完成！</p></blockquote><h2 id="解决的问题" tabindex="-1"><a class="header-anchor" href="#解决的问题" aria-hidden="true">#</a> 解决的问题</h2><p>Spring框架主要解决了创建对象和管理对象的问题！</p><p>传统的创建对象的方法例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>使用Spring框架之后，可以改为：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">User</span> user <span class="token operator">=</span> 从框架中获取<span class="token punctuation">;</span>
</code></pre></div><p>这样的做法的好处主要在于解耦，即解除耦合度，表现为降低对象与对象之间的依赖关系。</p><p>例如，在以下代码中，UserServlet就是依赖于UserDao的，因为功能的实现是通过UserDao中的reg()方法来实现的，如果没有UserDao类，则UserServlet无法完成用户注册功能：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			userDao<span class="token punctuation">.</span><span class="token function">reg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上UserServlet的代码中，明确的出现了UserDao的类名，也就是明确的表示了依赖于UserDao这个类，这种明确的依赖关系是不推荐的！万一随着项目的更新、维护等，UserDao这个类中的代码已经不足以满足后续的使用需求，希望通过另一个例如UserDao2这个类来替换它，则原有代码中：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样的语句都需要替换为：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">UserDao2</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样的维护方式是非常不便利的！</p><p>首先，可以通过接口解决其中一部分问题，例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>
		<span class="token keyword">void</span> <span class="token function">reg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>然后：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token keyword">implements</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao2</span> <span class="token keyword">implements</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>则在UserServlet中就可以使用接口去声明对象：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>所以，无论使用哪个类，或者需要更换，以后都不用再调整以上变量的声明部分！</p><p>如果希望对象的创建过程也不会体现出UserDao或UserDao2的名称，还可以使用设计模式中工厂模式来解决：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoFactory</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IUserDao</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserDao2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>则之前的代码就可以调整为：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> <span class="token class-name">UserDaoFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>由于以上代码中完全没有出现UserDao或UserDao2的类名，即使后续需要替换这些类，也只需要将新的类也实现IUserDao接口，并修改工厂方法中的返回值，而项目中其它位置的代码是不需要调整的！</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token class-name">IUserDao</span> userDao <span class="token operator">=</span> <span class="token class-name">UserDaoFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			userDao<span class="token punctuation">.</span><span class="token function">reg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>对于代码中并不出现别的类的名称，却可以正确使用它，则称之为耦合度较低！</p><p>在实际开发时，为每种定位的类都创建对应的工厂类是不现实的！所以，就有了Spring框架，可以把Spring框架理解为是一个庞大的工厂，可以创建各种各样的类的对象，在整个项目开发过程中，需要对象时，就找Spring框架去获取对象即可，从而实现解耦的目的，而Spring框架由于可以管理很多对象，所以也被称之为Spring容器。</p><p>当然，关于Spring框架，还有其它的特性，例如：IoC、DI、AOP等，将在后续进行讲解。</p><h2 id="准备spring环境" tabindex="-1"><a class="header-anchor" href="#准备spring环境" aria-hidden="true">#</a> 准备Spring环境</h2><p>创建<code>Maven Project</code>，在创建过程中，勾选<strong>Create a simple project ...</strong>，<strong>Artifact Id</strong>输入<code>cn.tedu.spring</code>，<code>Group Id</code>输入<code>SPRING01</code>，**<br> Packaging**选择<code>war</code>。</p><blockquote><p>在输入项目信息时，Artifact Id应该是即将使用的包中，Group Id应该 能描述项目的特征，Packaging应该根据项目的定位来选择，由于后续使用Java语言开发项目基本上是Web项目，所以可以选择war。</p></blockquote><p>创建好项目后，需要先生成<strong>web.xml</strong>文件。</p><p>然后，在<strong>pom.xml</strong>文件中添加<strong>spring-webmvc</strong>依赖：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>其实此次只需要使用spring-context依赖，但是，后续学习到SpringMVC框架开始就必须使用spring-webmvc依赖，而且，spring-webmvc依赖中包含了spring-context依赖，所以，此次也可以直接使用spring-webmvc。</p><p>另外，还需要从<code>http://doc.tedu.cn/config/spring-context.zip</code>下载Spring的配置文件压缩包，解压得到<strong>applicationContext.xml</strong>文件，将文件复制到项目的<strong>src/main/resources</strong>下：</p><h2 id="通过spring创建并获取对象-通过无参数构造方法" tabindex="-1"><a class="header-anchor" href="#通过spring创建并获取对象-通过无参数构造方法" aria-hidden="true">#</a> 通过Spring创建并获取对象－通过无参数构造方法</h2><p>首先创建<code>cn.tedu.spring.User</code>类：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>然后，在Spring的配置文件中添加配置：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.spring.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>然后，添加单元测试的依赖：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可以在<strong>src/test/java</strong>下创建<code>cn.tedu.spring.Tests</code>单元测试类，编写单元测试：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tests</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Test</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 加载Spring配置文件，获取Spring容器</span>
			<span class="token comment">// 从容器中获取所需的对象</span>
			<span class="token comment">// 测试</span>
			<span class="token comment">// 释放资源</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>具体实现为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tests</span> <span class="token punctuation">{</span>
	
		<span class="token annotation punctuation">@Test</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 加载Spring配置文件，获取Spring容器</span>
			<span class="token class-name">ClassPathXmlApplicationContext</span> ac
				<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>
					<span class="token string">&quot;applicationContext.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
			<span class="token comment">// 从容器中获取所需的对象</span>
			<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
			<span class="token comment">// 测试</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
			<span class="token comment">// 释放资源</span>
			ac<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过spring创建并获取对象-通过静态工厂方法-不常用" tabindex="-1"><a class="header-anchor" href="#通过spring创建并获取对象-通过静态工厂方法-不常用" aria-hidden="true">#</a> 通过Spring创建并获取对象－通过静态工厂方法（不常用）</h2><p>如果某个类中有静态的方法，并获取当前类的对象，例如<code>Calendar</code>类，通过<code>Calendar.getInstance()</code>即可获取<code>Calendar</code>类型的对象，则在配置时：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- 通过静态工厂方法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cal<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.util.Calendar<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="通过spring创建并获取对象-通过实例工厂方法-不常用" tabindex="-1"><a class="header-anchor" href="#通过spring创建并获取对象-通过实例工厂方法-不常用" aria-hidden="true">#</a> 通过Spring创建并获取对象－通过实例工厂方法（不常用）</h2><p>表现为某个类无法直接创建对象，但是，却有另一个工厂类，可以先创建工厂类的对象，然后，再创建所需要类的对象，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>
		<span class="token keyword">public</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>
		
		<span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">&quot;XiaoMi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在配置时：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 通过实例工厂方法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phoneFactory<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.spring.PhoneFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phone<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.spring.Phone<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phoneFactory<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getInstance<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这种做法就必须先创建工厂类<code>PhoneFactory</code>的对象，然后调用工厂类的方法<code>getInstance()</code>，从而完成类的创建。</p><p>这种做法还要求工厂类必须有无参数的构造方法！</p>`,61);function k(r,d){return s(),t("div",null,[l,u,p(" more "),i])}const v=a(o,[["render",k],["__file","2101202010.html.vue"]]);export{v as default};
