import{_ as s,o as a,c as t,d as p,a as n,b as e,e as o}from"./app-8f74759d.js";const c={},l=n("h1",{id:"mybatis-基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mybatis-基础","aria-hidden":"true"},"#"),e(" Mybatis 基础")],-1),u=n("p",null,"Mybatis 基础笔记",-1),i=o(`<h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p>简化持久层开发，当需要开发某个增删改查功能时，程序员只需要定义好该功能对应的抽象方法，及该抽象方法的功能对应的SQL语句即可。</p><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><p>与创建SpringMVC项目的步骤相同，另外，增加添加依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencys</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- MyBatis --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- MyBatis整合Spring --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- Spring-JDBC，与spring-webmvc使用相同版本 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.3.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- MySQL连接 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 数据库连接池 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencys</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置数据库连接" tabindex="-1"><a class="header-anchor" href="#配置数据库连接" aria-hidden="true">#</a> 配置数据库连接</h2><p>在<strong>src/main/resources</strong>下创建<code>db.properties</code>文件，用于配置数据库连接：</p><div class="language-yaml" data-ext="yml"><pre class="language-yaml"><code>    url=jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/tedu_ums<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span>
    driver=com.mysql.cj.jdbc.Driver
    username=root
    password=root
    initialSize=2
    maxActive=10
</code></pre></div><p>关于<code>driver</code>属性的配置：在<strong>mysql-connector-java</strong>的jar包中，展开，找到<strong>META-INF</strong>下的<strong>services</strong>下的<strong>java.sql.Driver</strong><br> 文件，该文件中记录的就是正确的驱动类，如果没有该文件，则使用<code>com.mysql.jdbc.Driver</code>。</p><p>然后，可以在Spring的配置文件中，通过<code>&lt;util:properties&gt;</code>节点读取以上配置文件：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 读db.properties配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">util:</span>properties</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dbConfig<span class="token punctuation">&quot;</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:db.properties<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>在实际连接时，应该使用<code>BasicDataSource</code>对象获取连接对象，在使用之前需要为<code>BasicDataSource</code>的相关属性注入值：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- 配置数据源 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.commons.dbcp.BasicDataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{dbConfig.url}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClassName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{dbConfig.driver}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{dbConfig.username}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{dbConfig.password}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>initialSize<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{dbConfig.initialSize}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxActive<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{dbConfig.maxActive}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>以上配置中，各<code>&lt;property&gt;</code>节点的<code>name</code>属性的值来自<code>BasicDataSource</code>中的属性名称，在Spring表达式例如<code>#{dbConfig.driver}</code>中的<code>driver</code>来自<strong>db.properties</strong><br> 文件中各等于号左侧的属性名。</p><p>完成后，就可以编写单元测试，尝试获取连接对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tests</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Test</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
			<span class="token class-name">ClassPathXmlApplicationContext</span> ac
				<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>
					<span class="token string">&quot;spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token class-name">DataSource</span> dataSource
				<span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;dataSource&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			ac<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口与抽象方法" tabindex="-1"><a class="header-anchor" href="#接口与抽象方法" aria-hidden="true">#</a> 接口与抽象方法</h2><p>在开发持久层功能时，需要为对应的功能定义抽象方法，这些抽象方法应该存在于接口中，所以，先创建对应的接口文件<code>cn.tedu.mybatis.UserMapper</code>：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>然后，在接口中添加抽象方法，关于抽象方法的设计原则：</p><ol><li>如果方法对应的功能是执行增、删、改，可以使用<code>Integer</code>作为返回值类型，表示“受影响的行数”，如果不关心返回值，也可以使用<code>void</code>，如果方法对应的功能是查询，返回值可以根据实际使用需求来设计；</li><li>方法的名称可以自定义，但绝不可以重载；</li><li>方法的参数按需设计。</li></ol><p>以“增加新用户数据为例”，可以设计为：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">Integer</span> <span class="token function">addnew</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>则还应该在项目补充创建<code>cn.tedu.mybatis.User</code>类。</p><p>然后，还需要在Spring的配置文件中，配置<code>org.mybatis.spring.mapper.MapperScannerConfigurer</code>类，以设置接口文件的位置：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- MapperScannerConfigurer --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basePackage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.mybatis<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="配置sql" tabindex="-1"><a class="header-anchor" href="#配置sql" aria-hidden="true">#</a> 配置SQL</h2><p>从<code>http://doc.tedu.cn/config/mybatis-mapper.zip</code>下载配置SQL语句的文件的压缩包，解压后得到<strong>SomeMapper.xml</strong>文件，将其重命名为<strong>UserMapper.xml</strong>。</p><p>在<strong>src/main/resources/<strong>下创建名为</strong>mappers</strong>的文件夹，然后将<strong>UserMapper.xml</strong>粘贴到这个文件夹中。</p><p>然后编辑<code>UserMapper.xml</code>，首先，添加<code>&lt;mapper&gt;</code>根节点，并配置<code>namespace</code>属性，取值是该XML文件对应的JAVA接口文件：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- namespace：对应的接口 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.mybatis.UserMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>然后，添加子级节点，以配置与接口中抽象方法对应的SQL语句，应该根据所需要执行的操作类型来决定使用<code>&lt;insert&gt;</code>、<code>&lt;delete&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;select&gt;</code>节点中的某一种，子点的<code>id</code><br> 属性就是对应的抽象方法的名称，然后，在节点内部配置所需要执行的SQL语句：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- id：抽象方法的名称 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addnew<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    INSERT INTO t_user (
    username,password,
    age,phone,
    email
    ) VALUES (
    #{username},#{password},
    #{age},#{phone},
    #{email}
    )
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果配置的是<code>&lt;select&gt;</code>节点，还必须配置<code>resultType</code>属性，用于表示返回值类型，如果返回值类型是<code>List</code>集合，则该属性配置值是<code>List</code>集合中的元素类型。</p><p>最后，还需要在Spring的配置文件中，配置<code>org.mybatis.spring.SqlSessionFactoryBean</code>类，用于指定：XML文件的位置，指定数据源：</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- SqlSessionFactoryBean --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- XML文件在哪里 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapperLocations<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:mappers/*.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token comment">&lt;!-- 用哪个数据源 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span>
              <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>验证以上功能是否完成，可以编写并执行单元测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addnew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">ClassPathXmlApplicationContext</span> ac
			<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>
				<span class="token string">&quot;spring.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token class-name">UserMapper</span> userMapper
			<span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;userMapper&quot;</span><span class="token punctuation">,</span> <span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;MyBatis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;888888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Integer</span> rows <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">addnew</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rows=&quot;</span> <span class="token operator">+</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		ac<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询时-需要查询结果中的列名与返回值类型中的属性名保持一致" tabindex="-1"><a class="header-anchor" href="#查询时-需要查询结果中的列名与返回值类型中的属性名保持一致" aria-hidden="true">#</a> 查询时，需要查询结果中的列名与返回值类型中的属性名保持一致</h2><p>假设在<code>t_user</code>表中添加了新的名为<code>is_delete</code>的字段：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> t_user <span class="token keyword">add</span> <span class="token keyword">column</span> is_delete <span class="token keyword">int</span><span class="token punctuation">;</span>
</code></pre></div><p>则对应的<code>User</code>类中也应该添加新的属性，以与对应：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> isDelete<span class="token punctuation">;</span>
</code></pre></div><p>当查询数据时，需要自定义别名，使得查询结果中的列名与返回值类型中的属性名保持一致：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findById<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.mybatis.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SELECT
    id,username,
    password,age,
    phone,email,
    is_delete AS isDelete
    FROM
    t_user
    WHERE
    id=#{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="简单的关联表查询数据" tabindex="-1"><a class="header-anchor" href="#简单的关联表查询数据" aria-hidden="true">#</a> 简单的关联表查询数据</h2><p>假设需要创建“部门信息表”：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>	<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_department <span class="token punctuation">(</span>
		id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;部门id&#39;</span><span class="token punctuation">,</span>
		name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;部门名称&#39;</span><span class="token punctuation">,</span>
		<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
	<span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre></div><p>然后，添加一些模拟数据：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>	<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_department <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;软件研发部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;人力资源部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;财务部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;销售部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>并且，每个用户都归属于某个部门：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>	<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> t_user <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> department_id <span class="token keyword">INT</span><span class="token punctuation">;</span>
</code></pre></div><p>最后，为用户分配部门：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>	<span class="token keyword">UPDATE</span> t_user <span class="token keyword">SET</span> department_id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">UPDATE</span> t_user <span class="token keyword">SET</span> department_id<span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">UPDATE</span> t_user <span class="token keyword">SET</span> department_id<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">UPDATE</span> t_user <span class="token keyword">SET</span> department_id<span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>假设存在需求“查询某用户的信息，并显示该用户的部门的名称”，必须通过关联查询才可以得到所需要的结果，需要执行的SQL语句大致是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>	<span class="token keyword">select</span> 
		<span class="token operator">*</span> 
	<span class="token keyword">from</span> 
		t_user 
	<span class="token keyword">left</span> <span class="token keyword">join</span> 
		t_department 
	<span class="token keyword">on</span> 
		t_user<span class="token punctuation">.</span>department_id<span class="token operator">=</span>t_department<span class="token punctuation">.</span>id 
	<span class="token keyword">where</span> 
		t_user<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要使用MyBatis开发该功能，首先，目前并没有某个类型可以封装查询结果！因为创建的<code>User</code>类是与<code>t_user</code>表相对应的，例如<code>User</code>这样的类称之为<strong>实体类(entity)</strong><br> ，实体类肯定不满足多表查询需求的，所以，对于这种情况，需要自行另创建<strong>VO类(value object)</strong>，这种类的设计应该与查询结果或查询需求相对应：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> isDelete<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> departmentId<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> departmentName<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>VO类的设计方式与实体类基本一致，只是这2种类的定位不同而已，实体类是与数据表对应的，VO类是与查询结果对应的。</p></blockquote><p>然后，可以将此前的<code>findById(Integer id)</code>的返回值类型修改为<code>UserVO</code>：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">UserVO</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>且映射的配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findById<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.mybatis.UserVO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    SELECT
    t_user.id,username,
    password,age,
    phone,email,
    is_delete AS isDelete,
    department_id AS departmentId,
    name AS departmentName
    FROM
    t_user
    LEFT JOIN
    t_department
    ON
    t_user.department_id=t_department.id
    WHERE
    t_user.id=#{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用resultmap处理1对多的关联查询" tabindex="-1"><a class="header-anchor" href="#使用resultmap处理1对多的关联查询" aria-hidden="true">#</a> 使用resultMap处理1对多的关联查询</h2><p>假设存在需求“查询某部门信息，且显示出该部门所有的员工”，需要执行的SQL语句大致是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>	<span class="token keyword">select</span> 
		<span class="token operator">*</span>
	<span class="token keyword">from</span>
		t_department
	<span class="token keyword">left</span> <span class="token keyword">join</span>
		t_user
	<span class="token keyword">on</span>
		t_department<span class="token punctuation">.</span>id<span class="token operator">=</span>t_user<span class="token punctuation">.</span>department_id
	<span class="token keyword">where</span>
		t_department<span class="token punctuation">.</span>id<span class="token operator">=</span>?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这类查询可能查到多条结果，取决于该部门的员工数量，但是，查询的需求却是查询“某1个”部门的信息！在设计查询的方法时，就需要某1个类型可以封装多条查询结果，可以：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentVO</span> <span class="token punctuation">{</span>
		<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
		<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>则对应的抽象方法可以是：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>
		<span class="token class-name">DepartmentVO</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre></div><p>此次查询必然可能出现多个结果，MyBatis并不知道如何将多个结果封装到1个对象中，所以，按照此前的查询做法，必然会出错！例如：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>TooManyResultsException</span><span class="token operator">:</span> <span class="token class-name">Expected</span> one result <span class="token punctuation">(</span>or <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">to</span> <span class="token namespace">be</span> returned by <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> but found<span class="token operator">:</span> <span class="token number">3</span>
</code></pre></div><p>在这种情况下，需要自定义<code>&lt;resultMap&gt;</code>节点，用于指导MyBatis如何将结果进行封装：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- id：自定义名称 --&gt;</span>
    <span class="token comment">&lt;!-- type：返回结果的类型 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DepartmentVO_Map<span class="token punctuation">&quot;</span></span>
               <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.mybatis.DepartmentVO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- id节点：用于配置主键 --&gt;</span>
        <span class="token comment">&lt;!-- result节点：用于配置非主键 --&gt;</span>
        <span class="token comment">&lt;!-- column：查询结果的列名 --&gt;</span>
        <span class="token comment">&lt;!-- property：返回结果类型中的属性名 --&gt;</span>
        <span class="token comment">&lt;!-- 无论哪个节点，都是用于告之MyBatis将查询结果中哪一列的数据放到返回类型中的哪个属性中 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- collection节点：用于配置1对多关系 --&gt;</span>
        <span class="token comment">&lt;!-- ofType：集合中的元素类型 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>users<span class="token punctuation">&quot;</span></span>
                    <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cn.tedu.mybatis.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phone<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>phone<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>is_delete<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isDelete<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findById<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DepartmentVO_Map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        SELECT
        t_department.id, name,
        t_user.id AS uid, username,
        password, age,
        phone, email,
        is_delete
        FROM
        t_department
        LEFT JOIN
        t_user
        ON
        t_department.id=t_user.department_id
        WHERE
        t_department.id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询结果例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">DepartmentVO</span> <span class="token punctuation">[</span>
		id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>软件研发部<span class="token punctuation">,</span> 
		users<span class="token operator">=</span><span class="token punctuation">[</span>
			<span class="token class-name">User</span> <span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token class-name">Mike01</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token number">13800138001</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token class-name">Mike</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> isDelete<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
		
			<span class="token class-name">User</span> <span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token class-name">Mike08</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token number">13800138001</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token class-name">Mike</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> isDelete<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
	
			<span class="token class-name">User</span> <span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token class-name">Mike11</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token number">13800138001</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token class-name">Mike</span><span class="token annotation punctuation">@qq.com</span><span class="token punctuation">,</span> isDelete<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
		<span class="token punctuation">]</span>
	<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态sql" tabindex="-1"><a class="header-anchor" href="#动态sql" aria-hidden="true">#</a> 动态SQL</h2><p>动态SQL指的是可以在配置SQL语句添加一些特殊的标签，例如<code>&lt;if&gt;</code>、<code>&lt;foreach&gt;</code>等，可以根据参数的不同，最终生成不同的SQL语句，则称之为动态SQL。</p><p>例如：根据若干个id删除数据，大致的SQL语句是：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>
	<span class="token keyword">delete</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>
</code></pre></div><p>在实际应用中，以上<code>IN</code>关键字后侧的括号中的值是不确定的，不光是值本身，值的数量也是不确定，并且各值之间需要使用逗号进行分隔，当值的数量不确定时，逗号的数量也是无法确定的！</p><p>首先，需要在<code>UserMapper.java</code>接口中添加抽象方法：</p><div class="language-java" data-ext="java"><pre class="language-java"><code>	<span class="token class-name">Integer</span> <span class="token function">deleteByIds</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在设计参数时，可以使用<code>List</code>集合类型，也可以使用数组类型。</p><p>然后，在<code>UserMapper.xml</code>中配置以上抽象方法的映射：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteByIds<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    DELETE FROM t_user
    WHERE id IN (
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span>
             <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        #{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
    )
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置<code>&lt;foreach&gt;</code>节点时：</p><ul><li><p><code>collection</code>：需要被遍历的集合或数据，如果抽象方法只有1个参数时，如果参数的类型是<code>List</code>集合，则取值为<code>list</code>，如果参数类型是数组，则取值为<code>array</code><br> ；如果抽象方法有多个参数，则该属性取值为<code>@Param(&quot;xx&quot;)</code>注解中使用的名称。</p></li><li><p><code>item</code>：遍历过程中，集合中的元素的名称，在<code>&lt;foreach&gt;</code>子级位置，可以使用<code>#{item值}</code>表示被遍历到的元素的值。</p></li><li><p><code>separator</code>：分隔符。</p></li><li><p><code>open</code>和<code>close</code>：遍历生成的SQL语句部分的最左侧字符和最右侧字符。</p></li></ul><h2 id="与-占位符" tabindex="-1"><a class="header-anchor" href="#与-占位符" aria-hidden="true">#</a> #{}与\${}占位符</h2><p>在MyBatis中，配置SQL语句时，可以使用<code>#{}</code>与<code>\${}</code>这2种占位符。</p><p>使用<code>#{}</code>占位符，可以用于占位某些值，也就是在SQL中写值的位置，都可以使用这种占位符(此前在学习JDBC时使用?的位置)；而<code>\${}</code>可以表示SQL语句的任何部分！</p><p>在使用<code>#{}</code>对某个值进行占位时，框架对整个SQL语句是有预编译处理的，无需考虑该值的数据类型的问题；而使用<code>\${}</code><br> 占位时，框架的处理方式其实就是非常单纯的字符串拼接，需要考虑数据类型的问题，如果占位的值中包括字符串类型的值，则必须使用<code>&#39;&#39;</code>框住值！</p><p>由于<code>#{}</code>只能对某个值进行占位，SQL语句本身是相对固定的，所以，这种做法实现的功能的局限性就非常明显，由于是预编译的，没有SQL注入风险，且工作效率较高！而<code>\${}</code><br> 可以随意占位，功能可以非常灵活，但是，不是预编译的，有SQL注入风险，工作效率较低。</p>`,93);function r(k,d){return a(),t("div",null,[l,u,p(" more "),i])}const v=s(c,[["render",r],["__file","1911011300.html.vue"]]);export{v as default};
