import{_ as e,o as a,c as r,e as t}from"./app-f39fbfe2.js";const i={},n=t('<h1 id="compilation-of-commonly-used-plugins-for-idea-continuously-updated" tabindex="-1"><a class="header-anchor" href="#compilation-of-commonly-used-plugins-for-idea-continuously-updated" aria-hidden="true">#</a> Compilation of commonly used plugins for IDEA, continuously updated.</h1><h2 id="lombok" tabindex="-1"><a class="header-anchor" href="#lombok" aria-hidden="true">#</a> Lombok</h2><p>Introduction: Automatically generates getters, setters, and toString methods.</p><p>You only need to define class properties, let Lombok handle the rest.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><p>@Getter and @Setter<br> @FieldNameConstants<br> @ToString<br> @EqualsAndHashCode<br> @AllArgsConstructor, @RequiredArgsConstructor, and @NoArgsConstructor<br> @Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog<br> @Data<br> @Builder<br> @SuperBuilder<br> @Singular<br> @Delegate<br> @Value<br> @Accessors<br> @Wither<br> @With<br> @SneakyThrows<br> @val and @var experimental<br> @var<br> @UtilityClass</p><blockquote><p>Usage: Apply the aforementioned annotations to your classes.</p></blockquote><h2 id="google-java-format" tabindex="-1"><a class="header-anchor" href="#google-java-format" aria-hidden="true">#</a> google-java-format</h2><p>Introduction: The google-java-format plugin allows automatic code formatting without using specific shortcuts.</p><h2 id="translation" tabindex="-1"><a class="header-anchor" href="#translation" aria-hidden="true">#</a> Translation</h2><p>Introduction: Translation plugin supporting Google Translate, Baidu Translate, and Youdao Translate. Google Translate is recommended.</p><h2 id="alibaba-java-coding-guidelines" tabindex="-1"><a class="header-anchor" href="#alibaba-java-coding-guidelines" aria-hidden="true">#</a> Alibaba Java Coding Guidelines</h2><p>Introduction: Alibaba code style checker. Non-compliant code sections are highlighted with wave underlines, and corresponding suggestions are displayed when hovering the mouse. Some issues can even be quickly fixed.</p><h2 id="leetcode-editor" tabindex="-1"><a class="header-anchor" href="#leetcode-editor" aria-hidden="true">#</a> Leetcode Editor</h2><p>Introduction: LeetCode plugin for solving coding problems within IDEA. It&#39;s truly convenient for sneaking in some algorithmic exercises while appearing to be working diligently.</p><p>You can also visit the official LeetCode website.</p><h2 id="jclasslib-bytecode-viewer" tabindex="-1"><a class="header-anchor" href="#jclasslib-bytecode-viewer" aria-hidden="true">#</a> Jclasslib Bytecode Viewer</h2><p>Introduction: Viewing the bytecode files of classes.</p><h2 id="camelcase" tabindex="-1"><a class="header-anchor" href="#camelcase" aria-hidden="true">#</a> CamelCase</h2><p>Introduction: Switching between several string formats. The following formats are supported:</p><h2 id="camelcase-first-word-lowercase-subsequent-words-uppercase" tabindex="-1"><a class="header-anchor" href="#camelcase-first-word-lowercase-subsequent-words-uppercase" aria-hidden="true">#</a> CamelCase: First word lowercase, subsequent words uppercase.</h2><p>All lowercase with underscore between words.<br> All lowercase with space between words.<br> All lowercase with hyphen between words.<br> Each word with initial uppercase.<br> All uppercase with underscore between words.</p><p>Usage: Hold Shift + Alt and press U repeatedly to convert the selected content&#39;s words between underscore, camel case, and uppercase, until the desired format is achieved.</p><h2 id="free-mybatis-plugin" tabindex="-1"><a class="header-anchor" href="#free-mybatis-plugin" aria-hidden="true">#</a> Free Mybatis Plugin</h2><p>Introduction: Allows navigation from methods in mapper interfaces to corresponding mapper.xml files.</p><h2 id="auto-filling-java-call-arguments" tabindex="-1"><a class="header-anchor" href="#auto-filling-java-call-arguments" aria-hidden="true">#</a> Auto Filling Java Call Arguments</h2><p>Introduction: Automatic filling of function arguments. When calling pre-defined functions that require parameter input, it is often the case that the variable names align with the parameter names. Manually filling in individual parameters can be time-consuming, especially with a large number of parameters. This plugin solves this problem.</p><h2 id="findbugs" tabindex="-1"><a class="header-anchor" href="#findbugs" aria-hidden="true">#</a> FindBugs</h2><p>Introduction: Static code analysis tool. It detects potential issues in your code and provides explanations.</p><h2 id="sequencediagram" tabindex="-1"><a class="header-anchor" href="#sequencediagram" aria-hidden="true">#</a> SequenceDiagram</h2><p>Introduction: Generates sequence diagrams based on the call chain, greatly assisting in viewing class invocations and source code.</p><h2 id="codota" tabindex="-1"><a class="header-anchor" href="#codota" aria-hidden="true">#</a> Codota</h2><p>Introduction: Code completion plugin. Competes with IDEA&#39;s code suggestion feature and allows searching for third-party usage of a particular function.</p><h2 id="maven-helper" tabindex="-1"><a class="header-anchor" href="#maven-helper" aria-hidden="true">#</a> Maven Helper</h2><p>Introduction: Maven dependency management.</p><h2 id="jrebel" tabindex="-1"><a class="header-anchor" href="#jrebel" aria-hidden="true">#</a> JRebel</h2><p>Introduction: Hot deployment plugin. For detailed instructions, refer to: link to tutorial</p>',37),o=[n];function s(d,l){return a(),r("div",null,o)}const h=e(i,[["render",s],["__file","2305090946.html.vue"]]);export{h as default};
