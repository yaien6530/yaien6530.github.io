import{_ as t,r as p,o,c,d as i,a as n,b as a,f as l,w as r,e as s}from"./app-b93dd20e.js";const u={},d=n("h1",{id:"深入理解synchronized",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#深入理解synchronized","aria-hidden":"true"},"#"),a(" 深入理解Synchronized")],-1),k=n("p",null,[n("strong",null,"synchronized"),a("关键字是为了处理在Java编程中多线程环境下的数据一致性和安全性的重要问题。"),n("br"),n("strong",null,"synchronized"),a("关键字可以用于方法或代码块，以确保在同一时刻只有一个线程可以访问被保护的资源（临界资源）。")],-1),h=s(`<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="临界资源" tabindex="-1"><a class="header-anchor" href="#临界资源" aria-hidden="true">#</a> 临界资源</h3><p>一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为<strong>临界区</strong>，其共享资源为<strong>临界资源</strong>。</p><p>多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了<strong>竞态条件</strong>。</p><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized" aria-hidden="true">#</a> Synchronized</h3><p>在Java中，所有的对象都有一个内置的锁。当一个线程进入一个synchronized方法或代码块时，它会获取这个锁，并在执行完毕后释放这个锁。其他任何尝试进入这个方法或代码块的线程都会被阻塞，直到当前线程释放锁。</p><p>synchronized关键字可以应用于实例方法、静态方法以及代码块。当它应用于实例方法时，锁是与当前对象实例关联的。当它应用于静态方法时，锁是与当前类关联的。当它应用于代码块时，锁是与当前对象实例或类关联的。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><h3 id="synchronized方法" tabindex="-1"><a class="header-anchor" href="#synchronized方法" aria-hidden="true">#</a> Synchronized方法</h3><p>当你声明一个方法为synchronized时，这个方法在同一时刻只能被一个线程访问。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* 实例方法，锁的是该类的实例对象
*/</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">synchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 执行代码...  </span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 静态方法，锁的是类对象
*/</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">synchronizedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 执行代码...  </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="synchronized代码块" tabindex="-1"><a class="header-anchor" href="#synchronized代码块" aria-hidden="true">#</a> Synchronized代码块</h3><p>除了synchronized方法，你还可以使用synchronized关键字来保护一个代码块。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

    <span class="token doc-comment comment">/**
    * 同步代码块，锁的是该类的实例对象
    */</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 执行代码...  </span>
    <span class="token punctuation">}</span>  
    
    <span class="token doc-comment comment">/**
    * 同步代码块，锁的是该类的类对象
    */</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 执行代码...  </span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 锁对象</span>
    <span class="token class-name">String</span> lock <span class="token operator">=</span> <span class="token string">&quot;lock&quot;</span>
    <span class="token doc-comment comment">/**
    * 同步代码块，锁的是配置的实例对象
    */</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">// 执行代码...  </span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深入理解" tabindex="-1"><a class="header-anchor" href="#深入理解" aria-hidden="true">#</a> 深入理解</h2><p><strong>synchronized</strong>是JVM的内置锁，基于<strong>Monitor</strong>机制实现，依赖底层操作系统的互斥原语<strong>Mutex（互斥量）</strong>，是一个重量级锁，性能较低。</p><p>JVM在1.5版本后做了许多的优化，例如偏向锁（Biased Locking）、轻量级锁（Biased Locking）、自适应自旋（Adaptive Spinning）、锁消除（Lock<br> Elimination）、锁粗化（Lock Coarsening）等技术来减少锁操作的性能开销，目前来讲synchronized的并发性能已经基本与Lock持平。</p><h3 id="字节码层面的实现" tabindex="-1"><a class="header-anchor" href="#字节码层面的实现" aria-hidden="true">#</a> 字节码层面的实现</h3><p>在使用synchronized关键字进行加锁操作时</p><ul><li>如果是在同步方法上加，是通过方法中的<strong>access_flag</strong>设置<strong>ACC_SYNCHRONIZED</strong>标志来实现</li><li>如果是在同步代码块上加，是通过<strong>monitorenter</strong>和<strong>monitorexit</strong>来实现</li></ul><h3 id="monitor-管程-监视器-机制" tabindex="-1"><a class="header-anchor" href="#monitor-管程-监视器-机制" aria-hidden="true">#</a> Monitor（管程/监视器）机制</h3><p><strong>Monitor</strong>直译为“监视器”，而操作系统领域一般翻译为“管程”。</p><p><strong>管程</strong>是指管理共享变量以及对共享变量操作的过程，让它们支持并发。在java1.5之前，java语言提供的唯一并发语言就是管程，1.5之后提供的SDK并发包也是以管程为基础的。</p><blockquote><p>synchronized关键字以及wait()、notify()、notifyAll()这三个方法就是java中实现管程技术的组成部分。</p></blockquote><h4 id="monitor设计思路" tabindex="-1"><a class="header-anchor" href="#monitor设计思路" aria-hidden="true">#</a> Monitor设计思路</h4><p>在管程的发展史上，先后出现过三种不同的管程模型，分别是<strong>Hasen</strong>模型、<strong>Hoare</strong>模型和<strong>MESA</strong>模型。现在正在广泛使用的是MESA模型。</p><figure><img src="https://qiniu.yanggl.cn/image/2311071055_1.png" alt="MESA管程模型" tabindex="0" loading="lazy"><figcaption>MESA管程模型</figcaption></figure><p>管程中引入了条件变量的概念，每一个条件变量都对应又一个等待队列。条件变量和等待队列的作用就是解决线程之间的同步问题。</p><blockquote><p>注意：对于使用<strong>wait()</strong></p></blockquote><p>时，唤醒的时间和获取到锁继续执行的时间是存在差异的，线程被唤醒之后再次执行时条件可能又不满足了。因此，对于MESA管程来说，使用wait()</p><blockquote><p>时会又一个编程范式：</p></blockquote><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>条件不满足<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>通常情况下，我们在编程时尽量使用 <strong>notifyAll()</strong> 来唤醒线程，若满足以下三个条件，可使用 <strong>notify()</strong> ：</p><ol><li>只需要唤醒一个线程</li><li>所有等待线程拥有i相同的等待条件</li><li>所有线等待线程被唤醒后，执行相同的操作</li></ol><h4 id="java内置管程" tabindex="-1"><a class="header-anchor" href="#java内置管程" aria-hidden="true">#</a> Java内置管程</h4><p>Java管程实现参考了MESA模型，语言内置的管程（synchronized）对MESA模型进行了简化。在MESA模型中，条件变量时允许多个的，而Java内置的管程只允许一个条件变量。</p><figure><img src="https://qiniu.yanggl.cn/image/2311071055_2.png" alt="JAVA管程模型" tabindex="0" loading="lazy"><figcaption>JAVA管程模型</figcaption></figure><h4 id="锁实现原理" tabindex="-1"><a class="header-anchor" href="#锁实现原理" aria-hidden="true">#</a> 锁实现原理</h4><figure><img src="https://qiniu.yanggl.cn/image/2311071055_3.png" alt="锁实现原理" tabindex="0" loading="lazy"><figcaption>锁实现原理</figcaption></figure><p>当一个线程去获取锁的时候，先将当前线程插入到_cxq队列（FILO）的头部</p><p>释放锁时默认策略（QMode=0）是：</p><ul><li>_EntityList为空，则将_cxq中的元素按原有顺序插入到_EntityList，并唤醒第一个线程。意味着当_EntityList为空时，后面来获取锁的线程先去获取锁</li><li>_EntityList不为空直接从_EntityList中唤醒线程</li></ul><blockquote><p>思考：让后面来获取锁的线程先去获取锁，这样的设计可以让已经睡眠的线程继续，而新来的直接去获取，降低线程的唤醒/睡眠操作</p></blockquote><h2 id="锁实现" tabindex="-1"><a class="header-anchor" href="#锁实现" aria-hidden="true">#</a> 锁实现</h2>`,44),m=s(`<p>在Hotspot中将锁标记分为了：<strong>无锁</strong>、<strong>偏向锁</strong>、<strong>轻量级锁</strong>、<strong>重量级锁</strong>，锁标记枚举如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">enum</span> <span class="token punctuation">{</span>
    loced_value             <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment">//00  轻量级锁</span>
    unlocked_value          <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment">//001 无锁</span>
    monitor_value           <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>     <span class="token comment">//10  重量级锁</span>
    marked_value            <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>     <span class="token comment">//11  GC标记</span>
    biased_lock_pattern     <span class="token operator">=</span><span class="token number">5</span>      <span class="token comment">//101 偏向锁锁</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="偏向锁" tabindex="-1"><a class="header-anchor" href="#偏向锁" aria-hidden="true">#</a> 偏向锁</h3><p>偏向锁是一种针对加锁操作的优化手段。在多数场景下，锁是不存在多线程竞争的，总是由同一线程多次获得。为了消除对象在没有竞争的情况下锁重入（CAS操作）的开销而引入偏向锁。</p><h4 id="延迟偏向" tabindex="-1"><a class="header-anchor" href="#延迟偏向" aria-hidden="true">#</a> 延迟偏向</h4><p>偏向锁机制存在偏向锁延迟机制，HotSpot虚拟机在启动后会有4s的延迟才会对每个新建的对象开启偏向锁模式。</p><p>这是因为JVM启动时会进行一系列复杂活动，比如类装载配置，系统类初始化等。在这个过程中会使用大量synchronized关键字为对象加锁，且这些锁大多数都不是偏向锁。为了减少初始化时间，JVM默认延迟加载偏向锁。</p><h4 id="匿名偏向" tabindex="-1"><a class="header-anchor" href="#匿名偏向" aria-hidden="true">#</a> 匿名偏向</h4><p>当JVM启用了偏行锁模式（JDK6后默认启用），新创建对象的对行头重ThreadId为0，说明此时处于可偏向但是未偏向任何线程，<br> 也叫做 <strong>匿名偏向</strong> 状态（anonymously biased）。</p><p>例子：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>输出结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#--------------首次创建，处于无锁状态-------------- </span>
java.lang.Object object internals:
OFF  SZ   TYPE DESCRIPTION               VALUE
  <span class="token number">0</span>   <span class="token number">8</span>        <span class="token punctuation">(</span>object header: mark<span class="token punctuation">)</span>     0x0000000000000001 <span class="token punctuation">(</span>non-biasable<span class="token punctuation">;</span> age: <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token number">8</span>   <span class="token number">4</span>        <span class="token punctuation">(</span>object header: class<span class="token punctuation">)</span>    0xf80001e5
 <span class="token number">12</span>   <span class="token number">4</span>        <span class="token punctuation">(</span>object alignment gap<span class="token punctuation">)</span>    
Instance size: <span class="token number">16</span> bytes
Space losses: <span class="token number">0</span> bytes internal + <span class="token number">4</span> bytes external <span class="token operator">=</span> <span class="token number">4</span> bytes total
 
<span class="token comment">#--------------延迟4s后，处于偏向锁-------------- </span>
java.lang.Object object internals:
OFF  SZ   TYPE DESCRIPTION               VALUE
  <span class="token number">0</span>   <span class="token number">8</span>        <span class="token punctuation">(</span>object header: mark<span class="token punctuation">)</span>     0x0000000000000005 <span class="token punctuation">(</span>biasable<span class="token punctuation">;</span> age: <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token number">8</span>   <span class="token number">4</span>        <span class="token punctuation">(</span>object header: class<span class="token punctuation">)</span>    0xf80001e5
 <span class="token number">12</span>   <span class="token number">4</span>        <span class="token punctuation">(</span>object alignment gap<span class="token punctuation">)</span>    
Instance size: <span class="token number">16</span> bytes
Space losses: <span class="token number">0</span> bytes internal + <span class="token number">4</span> bytes external <span class="token operator">=</span> <span class="token number">4</span> bytes total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="偏向锁撤销-调用hashcode" tabindex="-1"><a class="header-anchor" href="#偏向锁撤销-调用hashcode" aria-hidden="true">#</a> 偏向锁撤销-调用HashCode</h4><p>调用锁对象的hashCode()或者System.identityHashCode(obj)方法会导致该对象的偏向锁被撤销。<br> 原因是对于一个对象，其HashCode只会生成一次并保存，对象头中偏向锁是没有地方保存hashCode的。</p><p>需要注意的是，对象处于可偏向（匿名偏向）或者已偏向的状态时，调用hashCode()将会使得对象再无法偏向，并且处理也是不一样的，如下</p><ul><li>当对象处于可偏向（匿名偏向）时调用，MarkWord将变成未锁定状态，并只能升级为轻量锁</li><li>当对象处于已偏向时调用，将使得偏向锁升级为重量锁</li></ul><h4 id="偏向锁撤销-调用wait-notify" tabindex="-1"><a class="header-anchor" href="#偏向锁撤销-调用wait-notify" aria-hidden="true">#</a> 偏向锁撤销-调用wait/notify</h4><p>偏向锁状态执行notify()会升级为轻量级锁，调用wait(timeout)会升级为重量级锁</p><h3 id="轻量锁" tabindex="-1"><a class="header-anchor" href="#轻量锁" aria-hidden="true">#</a> 轻量锁</h3><p>当获取偏向锁失败，虚拟机并不会立即升级为重量级锁，他还会尝试使用一种称为轻量级锁的优化手段，而MarkWord的结构也会变为轻量级锁的结构。</p><p>轻量级锁适合的场景是线程交替执行同步块的场合，如果存在同一时间多个线程同时访问一把锁的场景时，轻量级锁就会膨胀升级为重量级锁。</p><h4 id="轻量锁是否存在自旋" tabindex="-1"><a class="header-anchor" href="#轻量锁是否存在自旋" aria-hidden="true">#</a> 轻量锁是否存在自旋</h4><p>轻量锁加锁失败会自旋，失败一定次数后会膨胀为重量锁这种理解是<strong>错误</strong>的！</p><p>轻量锁不存在自旋，只有重量锁加锁事变才会自旋。重量锁加锁失败，会多次尝试cas和自适应自旋，如果一直加锁失败就会阻塞当前线程，等待唤醒。</p><p>之所以这么设计，是因为轻量级锁本身就不是为了处理过于激烈的竞争场景，而是为了应对线程之间交替获取锁的场景。</p><h3 id="重量锁" tabindex="-1"><a class="header-anchor" href="#重量锁" aria-hidden="true">#</a> 重量锁</h3><h3 id="锁升级流程" tabindex="-1"><a class="header-anchor" href="#锁升级流程" aria-hidden="true">#</a> 锁升级流程</h3><figure><img src="https://qiniu.yanggl.cn/image/2311071055_4.png" alt="锁实现原理" tabindex="0" loading="lazy"><figcaption>锁实现原理</figcaption></figure><h2 id="锁优化进阶" tabindex="-1"><a class="header-anchor" href="#锁优化进阶" aria-hidden="true">#</a> 锁优化进阶</h2><h3 id="批量重偏向-批量撤销" tabindex="-1"><a class="header-anchor" href="#批量重偏向-批量撤销" aria-hidden="true">#</a> 批量重偏向&amp;批量撤销</h3><p>通过偏向锁加解锁过程，当只有一个线程反复进入同步块，偏向锁带来的性能开销基本可以忽略，但是当有其他线程尝试获取锁时，就需要等到safePoint时，再将偏向锁撤销为无锁或升级为轻量锁，这会消耗一定的性能。<br> 所以,当处于多线竞争频繁的情况下，偏向锁不仅不能提高性能，还会导致性能下降。</p><h4 id="批量重偏向" tabindex="-1"><a class="header-anchor" href="#批量重偏向" aria-hidden="true">#</a> 批量重偏向</h4><h4 id="批量重撤销" tabindex="-1"><a class="header-anchor" href="#批量重撤销" aria-hidden="true">#</a> 批量重撤销</h4><h3 id="自旋优化" tabindex="-1"><a class="header-anchor" href="#自旋优化" aria-hidden="true">#</a> 自旋优化</h3><p>重量级在竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（持有锁的线程已经释放锁了），当前线程就可以直接去获取锁避免阻塞。需要注意的是自旋会占用cpu时间，多核cpu自旋才能发挥优势。</p><p>在JDK6之后自旋是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会很高，就会多自旋几次，否则就少自旋甚至不自旋，较为智能。</p><blockquote><p>自旋的目的是为了减少线程挂机的次数，尽量避免直接挂机线程，因为挂记操作设计系统调用，存在用户态和内核态切换，这部分的开销是很大的</p></blockquote><h3 id="锁粗化" tabindex="-1"><a class="header-anchor" href="#锁粗化" aria-hidden="true">#</a> 锁粗化</h3><p>锁粗化是为了处理当有一系列连续的操作都会对同一个对象反复加/解锁，甚至连续加锁的操作都是在同一个方法体的情况。<br> 这样的操作即使没有出现线程竞争，频繁地进行同步操作也会导致不必要地性能损耗。</p><p>如果JVM检测到有一连串地操作都是对同一对象加锁，将会扩大锁地范围（锁粗化）到整个一连串操作地外部</p><div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><blockquote><p>上述为一个锁粗化的简单案例，当JVM检测到之后，会将其合并称一次范围更大的加/解锁操作，既在第一次append时加锁，在最后一次append结束后解锁。</p></blockquote><h3 id="锁消除" tabindex="-1"><a class="header-anchor" href="#锁消除" aria-hidden="true">#</a> 锁消除</h3><p>锁消除就是删掉一些不必要的加锁操作。</p><p>锁消除的操作是在编译期间，对运行上下文扫描，去除不可能存在临界资源竞争的锁（锁消除），以节省毫无意义的请求锁的时间。</p>`,46);function b(v,g){const e=p("RouterLink");return o(),c("div",null,[d,k,i(" more "),h,n("p",null,[a("JVM锁标识是记录再对象的对象头内的，关于对象内存布局以及对象头中锁标识的记录可查看"),l(e,{to:"/note/java/jvm/2311091006.html"},{default:r(()=>[a("JVM对象内存布局")]),_:1}),a("文章。")]),m])}const f=t(u,[["render",b],["__file","2311071055.html.vue"]]);export{f as default};
