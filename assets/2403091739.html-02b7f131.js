const e=JSON.parse('{"key":"v-07cfa97a","path":"/note/db/mysql/further/2403091739.html","title":"MVCC(Multi Version Concurrency Control)","lang":"zh-CN","frontmatter":{"isOriginal":true,"date":"2024-03-06T00:00:00.000Z","index":true,"order":8,"category":["DB"],"tag":["MySQL","MVCC"]},"headers":[{"level":2,"title":"Read-View机制详解","slug":"read-view机制详解","link":"#read-view机制详解","children":[{"level":3,"title":"Read-View和可见性算法原理解释","slug":"read-view和可见性算法原理解释","link":"#read-view和可见性算法原理解释","children":[]}]}],"git":{"createdTime":1709982690000,"updatedTime":1709982690000,"contributors":[{"name":"yanggl","email":"yaien6530@gmail.com","commits":1}]},"readingTime":{"minutes":3.92,"words":1177},"filePathRelative":"note/db/mysql/further/2403091739.md","localizedDate":"2024年3月6日","excerpt":"<h1> MVCC(Multi Version Concurrency Control)</h1>\\n<p>Mysql在<strong>读已提交和可重复读</strong>级别下保证事务隔离性，就是靠<strong>MVCC(Multi Version Concurrency Control)<strong>机制来保证的。对一行数据的读和写操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥。MVCC由</strong>undo log日志版本链和read-view机制</strong>进行比对来实现不同事务在不同版本链中查询出不同版本的数据。</p>\\n<p>在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。</p>\\n","copyright":{"author":"Yaien","license":"MIT"}}');export{e as data};
