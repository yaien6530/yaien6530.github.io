import{_ as c,Q as t,a3 as r,a6 as l,a4 as e,a5 as a,V as o,a7 as n,C as p}from"./framework-94ca7993.js";const i={},d=e("h1",{id:"docker安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker安装","aria-hidden":"true"},"#"),a(" Docker安装")],-1),u=e("p",null,"本文记录Docker容器安装的详细步骤",-1),k=n(`<p>Docker从17.03版本之后分为CE（Community Edition: 社区版）和EE（Enterprise Edition: 企业版）。相对于社区版本，企业版本强调安全性，但需付费使用。这里我们使用社区版本即可。</p><p>Docker支持64位版本的CentOS 7和CentOS 8及更高版本，它要求Linux内核版本不低于3.10。</p><p>查看Linux版本的命令这里推荐两种：<code>lsb_release -a</code>或<code>cat /etc/redhat-release</code>。</p><p><code>lsb_release -a</code>查看效果：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> ~<span class="token punctuation">]</span>$ lsb_release <span class="token parameter variable">-a</span>
LSB Version:	:core-4.1-amd64:core-4.1-noarch
Distributor ID:	CentOS
Description:	CentOS Linux release <span class="token number">7.6</span>.1810 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
Release:	<span class="token number">7.6</span>.1810
Codename:	Core
</code></pre></div><p><code>cat /etc/redhat-release</code>查看版本效果：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>~<span class="token punctuation">]</span>$ <span class="token function">cat</span> /etc/redhat-release
CentOS Linux release <span class="token number">7.6</span>.1810 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span>
</code></pre></div><p>显然，当前Linux系统为CentOS7。再查一下内核版本是否不低于3.10。</p><p>查看内核版本有三种方式：</p><ul><li>cat /proc/version</li><li>uname -a</li><li>uname -r</li></ul><p>三种形式都可以查看到内容版本，比如：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span> ~<span class="token punctuation">]</span>$ <span class="token function">uname</span> <span class="token parameter variable">-r</span>
<span class="token number">3.10</span>.0-1160.45.1.el7.x86_64
</code></pre></div><p>可以看到，当前Linux内核版本满足Docker的需要。</p><h2 id="docker的自动化安装" tabindex="-1"><a class="header-anchor" href="#docker的自动化安装" aria-hidden="true">#</a> Docker的自动化安装</h2><p>Docker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。</p><p>官方的一键安装方式：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun
</code></pre></div><p>国内 daocloud一键安装命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.daocloud.io/docker <span class="token operator">|</span> <span class="token function">sh</span>
</code></pre></div><p>执行上述任一条命令，耐心等待即可完成Docker的安装。</p><h2 id="docker手动安装" tabindex="-1"><a class="header-anchor" href="#docker手动安装" aria-hidden="true">#</a> Docker手动安装</h2><p>手动安装Docker分三步：卸载、设置仓库、安装。</p><h3 id="卸载docker-可选" tabindex="-1"><a class="header-anchor" href="#卸载docker-可选" aria-hidden="true">#</a> 卸载Docker（可选）</h3><p><strong>第一步，卸载历史版本</strong>。这一步是可选的，如果之前安装过旧版本的Docker，可以使用如下命令进行卸载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-selinux <span class="token punctuation">\\</span>
                  docker-engine-selinux <span class="token punctuation">\\</span>
                  docker-engine <span class="token punctuation">\\</span>
                  docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置源仓库" tabindex="-1"><a class="header-anchor" href="#设置源仓库" aria-hidden="true">#</a> 设置源仓库</h3><p><strong>第二步，设置仓库</strong>。新主机上首次安装Docker Engine-Community之前，需要设置Docker仓库。此后可从仓库安装和更新Docker。</p><p>在设置仓库之前，需先按照所需的软件包。yum-utils提供了yum-config-manager，并且device mapper存储驱动程序需要device-mapper-persistent-data和lvm2。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
  device-mapper-persistent-data <span class="token punctuation">\\</span>
  lvm2
</code></pre></div><p>执行上述命令，安装完毕即可进行仓库的设置。使用官方源地址设置命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://download.docker.com/linux/centos/docker-ce.repo
</code></pre></div><p>通常，官方的源地址比较慢，可将上述的源地址替换为国内比较快的地址：</p>`,32),h={href:"http://mirrors.tuna.tsinghua.edu.cn",target:"_blank",rel:"noopener noreferrer"},m=e("strong",null,"docker-ce",-1),g=e("strong",null,"linux",-1),b=e("strong",null,"centos",-1),v=n(`<p>仓库设置完毕，即可进行Docker的安装。</p><h3 id="docker安装-1" tabindex="-1"><a class="header-anchor" href="#docker安装-1" aria-hidden="true">#</a> Docker安装</h3><p>执行一下命令，安装最新版本的 Docker Engine-Community 和 containerd。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce docker-ce-cli containerd.io
</code></pre></div><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。但安装完成之后的默认是未启动的，需要进行启动操作。</p><p>如果不需要docker-ce-cli或containerd.io可直接执行如下命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce
</code></pre></div><p>至此，完成Docker安装。</p><h2 id="docker启动" tabindex="-1"><a class="header-anchor" href="#docker启动" aria-hidden="true">#</a> Docker启动</h2><p>启动Docker的命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre></div><p>通过运行hello-world镜像来验证是否正确安装了Docker Engine-Community。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>// 拉取镜像
<span class="token function">sudo</span> <span class="token function">docker</span> pull hello-world
// 执行hello-world
<span class="token function">sudo</span> <span class="token function">docker</span> run hello-world
</code></pre></div><p>如果执行之后，控制台显示如下信息，则说明Docker安装和启动成功：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@iZ8vb8pfb2awsz4qy7vm7qZ ~<span class="token punctuation">]</span><span class="token comment"># docker run hello-world</span>

Hello from Docker<span class="token operator">!</span>
This message shows that your installation appears to be working correctly.
</code></pre></div><p>除了启动Docker，一些其他启动相关的命令：</p><ul><li>守护进程重启：systemctl daemon-reload</li><li>重启Docker服务：systemctl restart docker / service docker restart</li><li>关闭Docker服务：docker service docker stop / docker systemctl stop docker</li></ul><h2 id="删除docker" tabindex="-1"><a class="header-anchor" href="#删除docker" aria-hidden="true">#</a> 删除Docker</h2><p>删除安装包：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum remove docker-ce
</code></pre></div>`,20),f={href:"https://cloud.tencent.com/product/tke?from=10680",target:"_blank",rel:"noopener noreferrer"},_=n(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
</code></pre></div><h2 id="docker其他常见命令" tabindex="-1"><a class="header-anchor" href="#docker其他常见命令" aria-hidden="true">#</a> Docker其他常见命令</h2><p>安装完成Docker之后，这里汇总列一下常见的Docker操作命令：</p><ul><li>搜索仓库镜像：docker search 镜像名</li><li>拉取镜像：docker pull 镜像名</li><li>查看正在运行的容器：docker ps</li><li>查看所有容器：docker ps -a</li><li>删除容器：docker rm container_id</li><li>查看镜像：docker images</li><li>删除镜像：docker rmi image_id</li><li>启动（停止的）容器：docker start 容器ID</li><li>停止容器：docker stop 容器ID</li><li>重启容器：docker restart 容器ID</li><li>启动（新）容器：docker run -it ubuntu /bin/bash</li><li>进入容器：<code>docker attach 容器ID</code>或<code>docker exec -it 容器ID /bin/bash</code>，推荐使用后者。</li></ul><p>更多的命令可以通过<code>docker help</code>命令来查看。</p>`,5);function x(D,y){const s=p("ExternalLinkIcon");return t(),r("div",null,[d,u,l(" more "),k,e("ul",null,[e("li",null,[a("清华大学源：https:**//"),e("strong",null,[e("a",h,[a("mirrors.tuna.tsinghua.edu.cn"),o(s)])]),a("/"),m,a("/"),g,a("/"),b,a("/**docker-ce.repo")])]),v,e("p",null,[a("删除镜像、"),e("a",f,[a("容器"),o(s)]),a("、配置文件等内容：")]),_])}const E=c(i,[["render",x],["__file","2305081011.html.vue"]]);export{E as default};
